Shader "Hidden/Internal-DepthNormalsTexture" {
Properties {
 _MainTex ("", 2D) = "white" { }
 _Cutoff ("", Float) = 0.500000
 _Color ("", Color) = (1.000000,1.000000,1.000000,1.000000)
}
SubShader { 
 Tags { "RenderType"="Opaque" }
 Pass {
  Tags { "RenderType"="Opaque" }
  GpuProgramID 6627
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   glstate_matrix_modelview0          c4       3
					//   glstate_matrix_invtrans_modelview0 c7       3
					//   _ProjectionParams                  c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mul r0.x, r0.x, c10.w
					    mov o1.w, -r0.x
					    dp3 r0.x, c7, v1
					    dp3 r0.y, c8, v1
					    dp3 r0.z, c9, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					
					// approximately 14 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat3 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3 = inversesqrt(u_xlat3);
					    vs_TEXCOORD0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD0.w = (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat3 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3 = inversesqrt(u_xlat3);
					    vs_TEXCOORD0.xyz = vec3(u_xlat3) * u_xlat0.xyz;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD0.w = (-u_xlat0.x);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					    ps_3_0
					    def c0, 1, 0.281262308, 0.5, 255
					    def c1, 0.00392156886, 0, 0, 0
					    dcl_texcoord v0
					    add r0.x, c0.x, v0.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v0
					    mad_pp oC0.xy, r0, c0.y, c0.z
					    mul r0.xy, c0.xwzw, v0.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c1.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 8 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD0.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD0.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD0.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD0.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "RenderType"="TransparentCutout" }
 Pass {
  Tags { "RenderType"="TransparentCutout" }
  GpuProgramID 75056
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   glstate_matrix_modelview0          c4       3
					//   glstate_matrix_invtrans_modelview0 c7       3
					//   _ProjectionParams                  c10      1
					//   _MainTex_ST                        c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mul r0.x, r0.x, c10.w
					    mov o2.w, -r0.x
					    mad o1.xy, v2, c11, c11.zwzw
					    dp3 r0.x, c7, v1
					    dp3 r0.y, c8, v1
					    dp3 r0.z, c9, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					
					// approximately 15 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_2_3[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat3 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3 = inversesqrt(u_xlat3);
					    vs_TEXCOORD1.xyz = vec3(u_xlat3) * u_xlat0.xyz;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_ST;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_2_3[10];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat3 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat3 = inversesqrt(u_xlat3);
					    vs_TEXCOORD1.xyz = vec3(u_xlat3) * u_xlat0.xyz;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * in_POSITION0.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Cutoff      c0       1
					//   _Color       c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0.281262308, 0.5, 255
					    def c3, 0.00392156886, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    mov r1.w, c1.w
					    mad_pp r0, r0.w, r1.w, -c0.x
					    texkill r0
					    add r0.x, c2.x, v1.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v1
					    mad_pp oC0.xy, r0, c2.y, c2.z
					    mul r0.xy, c2.xwzw, v1.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c3.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 12 instruction slots used (1 texture, 11 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * _Color.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "RenderType"="TreeBark" }
 Pass {
  Tags { "RenderType"="TreeBark" }
  GpuProgramID 176497
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float _SquashAmount;
					//   float4 _SquashPlaneNormal;
					//   float4 _Time;
					//   float4 _TreeInstanceScale;
					//   float4 _Wind;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   unity_ObjectToWorld                c4       4
					//   glstate_matrix_modelview0          c8       3
					//   glstate_matrix_invtrans_modelview0 c11      3
					//   _Time                              c14      1
					//   _ProjectionParams                  c15      1
					//   _TreeInstanceScale                 c16      1
					//   _SquashPlaneNormal                 c17      1
					//   _SquashAmount                      c18      1
					//   _Wind                              c19      1
					//
					
					    vs_3_0
					    def c20, 1.97500002, 0.792999983, 0.375, 0.193000004
					    def c21, 1, 2, -0.5, -1
					    def c22, 2, 3, 0.100000001, 0.300000012
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_color v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    mov r0.x, c21.x
					    dp3 r0.x, c7, r0.x
					    add r0.y, r0.x, v4.x
					    add r0.z, r0.y, v4.y
					    mul r1.xyz, c16, v0
					    dp3 r0.x, r1, r0.z
					    add r0, r0.xxyy, c14.y
					    mul r0, r0, c20
					    frc r0, r0
					    mad r0, r0, c21.y, c21.z
					    frc r0, r0
					    mad r0, r0, c21.y, c21.w
					    mul r2, r0_abs, r0_abs
					    mad r0, r0_abs, -c22.x, c22.y
					    mul r0, r0, r2
					    add r0.xy, r0.ywzw, r0.xzzw
					    mul r2.xyz, r0.y, c19
					    mul r2.xyz, r2, v3.y
					    mul r3.y, r0.y, v3.y
					    mul r0.y, c22.z, v4.y
					    mul r3.xz, r0.y, v1
					    mov r0.z, c22.w
					    mad r0.xyz, r0.xzxw, r3, r2
					    mad r0.xyz, r0, c19.w, r1
					    mad r0.xyz, v3.x, c19, r0
					    dp3 r0.w, c17, r0
					    add r0.w, r0.w, c17.w
					    mad r1.xyz, r0.w, -c17, r0
					    lrp r2.xyz, c18.x, r0, r1
					    mov r2.w, c21.x
					    dp4 o0.x, c0, r2
					    dp4 o0.y, c1, r2
					    dp4 o0.z, c2, r2
					    dp4 o0.w, c3, r2
					    dp4 r0.x, c10, r2
					    mul r0.x, r0.x, c15.w
					    mov o2.w, -r0.x
					    nrm r0.xyz, v1
					    dp3 r1.x, c11, r0
					    dp3 r1.y, c12, r0
					    dp3 r1.z, c13, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul o2.xyz, r0.x, r1
					    mov o1.xy, v2
					
					// approximately 47 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _Wind;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_4[6];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_3_0[6];
						vec4 _TreeInstanceScale;
						vec4 unused_3_2[4];
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_3_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = unity_ObjectToWorld[0].w;
					    u_xlat0.y = unity_ObjectToWorld[1].w;
					    u_xlat0.z = unity_ObjectToWorld[2].w;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(1.0, 1.0, 1.0));
					    u_xlat0.y = u_xlat0.x + in_COLOR0.x;
					    u_xlat8 = u_xlat0.y + in_COLOR0.y;
					    u_xlat1.xyz = in_POSITION0.xyz * _TreeInstanceScale.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, vec3(u_xlat8));
					    u_xlat0 = u_xlat0.xxyy + _Time.yyyy;
					    u_xlat0 = u_xlat0 * vec4(1.97500002, 0.792999983, 0.375, 0.193000004);
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = abs(u_xlat0) * abs(u_xlat0);
					    u_xlat0 = -abs(u_xlat0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0.xy = u_xlat0.yw + u_xlat0.xz;
					    u_xlat2.xyz = u_xlat0.yyy * _Wind.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TEXCOORD1.yyy;
					    u_xlat3.y = u_xlat0.y * in_TEXCOORD1.y;
					    u_xlat4 = in_COLOR0.y * 0.100000001;
					    u_xlat3.xz = vec2(u_xlat4) * in_NORMAL0.xz;
					    u_xlat0.z = 0.300000012;
					    u_xlat0.xyz = u_xlat0.xzx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Wind.www + u_xlat1.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * _Wind.xyz + u_xlat0.xyz;
					    u_xlat12 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat12)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat4 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat4;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyw = glstate_matrix_invtrans_modelview0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _Wind;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_4[6];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_3_0[6];
						vec4 _TreeInstanceScale;
						vec4 unused_3_2[4];
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_3_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = unity_ObjectToWorld[0].w;
					    u_xlat0.y = unity_ObjectToWorld[1].w;
					    u_xlat0.z = unity_ObjectToWorld[2].w;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(1.0, 1.0, 1.0));
					    u_xlat0.y = u_xlat0.x + in_COLOR0.x;
					    u_xlat8 = u_xlat0.y + in_COLOR0.y;
					    u_xlat1.xyz = in_POSITION0.xyz * _TreeInstanceScale.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, vec3(u_xlat8));
					    u_xlat0 = u_xlat0.xxyy + _Time.yyyy;
					    u_xlat0 = u_xlat0 * vec4(1.97500002, 0.792999983, 0.375, 0.193000004);
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = abs(u_xlat0) * abs(u_xlat0);
					    u_xlat0 = -abs(u_xlat0) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0.xy = u_xlat0.yw + u_xlat0.xz;
					    u_xlat2.xyz = u_xlat0.yyy * _Wind.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TEXCOORD1.yyy;
					    u_xlat3.y = u_xlat0.y * in_TEXCOORD1.y;
					    u_xlat4 = in_COLOR0.y * 0.100000001;
					    u_xlat3.xz = vec2(u_xlat4) * in_NORMAL0.xz;
					    u_xlat0.z = 0.300000012;
					    u_xlat0.xyz = u_xlat0.xzx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Wind.www + u_xlat1.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * _Wind.xyz + u_xlat0.xyz;
					    u_xlat12 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat12 = u_xlat12 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat12)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat4 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat4;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyw = glstate_matrix_invtrans_modelview0[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					    ps_3_0
					    def c0, 1, 0.281262308, 0.5, 255
					    def c1, 0.00392156886, 0, 0, 0
					    dcl_texcoord1 v0
					    add r0.x, c0.x, v0.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v0
					    mad_pp oC0.xy, r0, c0.y, c0.z
					    mul r0.xy, c0.xwzw, v0.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c1.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 8 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "RenderType"="TreeLeaf" }
 Pass {
  Tags { "RenderType"="TreeLeaf" }
  GpuProgramID 233981
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float _SquashAmount;
					//   float4 _SquashPlaneNormal;
					//   float4 _Time;
					//   float4 _TreeInstanceScale;
					//   float4 _Wind;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   unity_ObjectToWorld                c4       4
					//   glstate_matrix_modelview0          c8       3
					//   glstate_matrix_invtrans_modelview0 c11      3
					//   _Time                              c14      1
					//   _ProjectionParams                  c15      1
					//   _TreeInstanceScale                 c16      1
					//   _SquashPlaneNormal                 c17      1
					//   _SquashAmount                      c18      1
					//   _Wind                              c19      1
					//
					
					    vs_3_0
					    def c20, 1.97500002, 0.792999983, 0.375, 0.193000004
					    def c21, 1, 2, -0.5, -1
					    def c22, 2, 3, 0.100000001, 0.300000012
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    mov r0.x, c21.x
					    dp3 r0.x, c7, r0.x
					    add r0.y, r0.x, v5.x
					    add r0.z, r0.y, v5.y
					    mul r1, c12, v2.y
					    mad r1, v2.x, c11, r1
					    add r0.w, c21.x, -v1_abs.w
					    mad r2.xyz, r1, r0.w, v0
					    mad r1, v2.z, c13, r1
					    mul r2.xyz, r2, c16
					    dp3 r0.x, r2, r0.z
					    add r3, r0.xxyy, c14.y
					    mul r3, r3, c20
					    frc r3, r3
					    mad r3, r3, c21.y, c21.z
					    frc r3, r3
					    mad r3, r3, c21.y, c21.w
					    mul r4, r3_abs, r3_abs
					    mad r3, r3_abs, -c22.x, c22.y
					    mul r3, r3, r4
					    add r0.xy, r3.ywzw, r3.xzzw
					    mul r3.xyz, r0.y, c19
					    mul r3.xyz, r3, v4.y
					    mul r4.y, r0.y, v4.y
					    dp4 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mad r1.xyz, r1, r0.y, -v2
					    mad r1.xyz, r0.w, r1, v2
					    mul r0.y, c22.z, v5.y
					    mul r4.xz, r1, r0.y
					    nrm r5.xyz, r1
					    mov r0.z, c22.w
					    mad r0.xyz, r0.xzxw, r4, r3
					    mad r0.xyz, r0, c19.w, r2
					    mad r0.xyz, v4.x, c19, r0
					    dp3 r0.w, c17, r0
					    add r0.w, r0.w, c17.w
					    mad r1.xyz, r0.w, -c17, r0
					    lrp r2.xyz, c18.x, r0, r1
					    mov r2.w, c21.x
					    dp4 o0.x, c0, r2
					    dp4 o0.y, c1, r2
					    dp4 o0.z, c2, r2
					    dp4 o0.w, c3, r2
					    dp4 r0.x, c10, r2
					    mul r0.x, r0.x, c15.w
					    mov o2.w, -r0.x
					    dp3 r0.x, c11, r5
					    dp3 r0.y, c12, r5
					    dp3 r0.z, c13, r5
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mov o1.xy, v3
					
					// approximately 56 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _Wind;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_4[6];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_3_0[6];
						vec4 _TreeInstanceScale;
						vec4 unused_3_2[4];
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_3_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = unity_ObjectToWorld[0].w;
					    u_xlat0.y = unity_ObjectToWorld[1].w;
					    u_xlat0.z = unity_ObjectToWorld[2].w;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(1.0, 1.0, 1.0));
					    u_xlat0.y = u_xlat0.x + in_COLOR0.x;
					    u_xlat10 = u_xlat0.y + in_COLOR0.y;
					    u_xlat1.x = dot(in_NORMAL0.xy, glstate_matrix_invtrans_modelview0[0].xy);
					    u_xlat1.y = dot(in_NORMAL0.xy, glstate_matrix_invtrans_modelview0[1].xy);
					    u_xlat1.z = dot(in_NORMAL0.xy, glstate_matrix_invtrans_modelview0[2].xy);
					    u_xlat15 = -abs(in_TANGENT0.w) + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat15) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _TreeInstanceScale.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, vec3(u_xlat10));
					    u_xlat2 = u_xlat0.xxyy + _Time.yyyy;
					    u_xlat2 = u_xlat2 * vec4(1.97500002, 0.792999983, 0.375, 0.193000004);
					    u_xlat2 = fract(u_xlat2);
					    u_xlat2 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = fract(u_xlat2);
					    u_xlat2 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat3 = abs(u_xlat2) * abs(u_xlat2);
					    u_xlat2 = -abs(u_xlat2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat0.xy = u_xlat2.yw + u_xlat2.xz;
					    u_xlat2.xyz = u_xlat0.yyy * _Wind.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TEXCOORD1.yyy;
					    u_xlat3.y = u_xlat0.y * in_TEXCOORD1.y;
					    u_xlat4.w = dot(in_NORMAL0.xyz, glstate_matrix_invtrans_modelview0[3].xyz);
					    u_xlat4.x = dot(in_NORMAL0.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
					    u_xlat5 = dot(u_xlat4, u_xlat4);
					    u_xlat5 = inversesqrt(u_xlat5);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat5) + (-in_NORMAL0.xyz);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz + in_NORMAL0.xyz;
					    u_xlat5 = in_COLOR0.y * 0.100000001;
					    u_xlat3.xz = u_xlat4.xz * vec2(u_xlat5);
					    u_xlat0.z = 0.300000012;
					    u_xlat0.xyz = u_xlat0.xzx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Wind.www + u_xlat1.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * _Wind.xyz + u_xlat0.xyz;
					    u_xlat15 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat15)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat1.xyw = glstate_matrix_invtrans_modelview0[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat5 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat5;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[8];
						vec4 _Wind;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_4[6];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_3_0[6];
						vec4 _TreeInstanceScale;
						vec4 unused_3_2[4];
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_3_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = unity_ObjectToWorld[0].w;
					    u_xlat0.y = unity_ObjectToWorld[1].w;
					    u_xlat0.z = unity_ObjectToWorld[2].w;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(1.0, 1.0, 1.0));
					    u_xlat0.y = u_xlat0.x + in_COLOR0.x;
					    u_xlat10 = u_xlat0.y + in_COLOR0.y;
					    u_xlat1.x = dot(in_NORMAL0.xy, glstate_matrix_invtrans_modelview0[0].xy);
					    u_xlat1.y = dot(in_NORMAL0.xy, glstate_matrix_invtrans_modelview0[1].xy);
					    u_xlat1.z = dot(in_NORMAL0.xy, glstate_matrix_invtrans_modelview0[2].xy);
					    u_xlat15 = -abs(in_TANGENT0.w) + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat15) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _TreeInstanceScale.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, vec3(u_xlat10));
					    u_xlat2 = u_xlat0.xxyy + _Time.yyyy;
					    u_xlat2 = u_xlat2 * vec4(1.97500002, 0.792999983, 0.375, 0.193000004);
					    u_xlat2 = fract(u_xlat2);
					    u_xlat2 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = fract(u_xlat2);
					    u_xlat2 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat3 = abs(u_xlat2) * abs(u_xlat2);
					    u_xlat2 = -abs(u_xlat2) * vec4(2.0, 2.0, 2.0, 2.0) + vec4(3.0, 3.0, 3.0, 3.0);
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat0.xy = u_xlat2.yw + u_xlat2.xz;
					    u_xlat2.xyz = u_xlat0.yyy * _Wind.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * in_TEXCOORD1.yyy;
					    u_xlat3.y = u_xlat0.y * in_TEXCOORD1.y;
					    u_xlat4.w = dot(in_NORMAL0.xyz, glstate_matrix_invtrans_modelview0[3].xyz);
					    u_xlat4.x = dot(in_NORMAL0.xyz, glstate_matrix_invtrans_modelview0[0].xyz);
					    u_xlat4.y = dot(in_NORMAL0.xyz, glstate_matrix_invtrans_modelview0[1].xyz);
					    u_xlat4.z = dot(in_NORMAL0.xyz, glstate_matrix_invtrans_modelview0[2].xyz);
					    u_xlat5 = dot(u_xlat4, u_xlat4);
					    u_xlat5 = inversesqrt(u_xlat5);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat5) + (-in_NORMAL0.xyz);
					    u_xlat4.xyz = vec3(u_xlat15) * u_xlat4.xyz + in_NORMAL0.xyz;
					    u_xlat5 = in_COLOR0.y * 0.100000001;
					    u_xlat3.xz = u_xlat4.xz * vec2(u_xlat5);
					    u_xlat0.z = 0.300000012;
					    u_xlat0.xyz = u_xlat0.xzx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _Wind.www + u_xlat1.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * _Wind.xyz + u_xlat0.xyz;
					    u_xlat15 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat15 = u_xlat15 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat15)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat1.xyw = glstate_matrix_invtrans_modelview0[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = glstate_matrix_invtrans_modelview0[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    vs_TEXCOORD1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat5 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat5;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Cutoff      c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0.281262308, 0.5, 255
					    def c2, 0.00392156886, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add_pp r0, r0.w, -c0.x
					    texkill r0
					    add r0.x, c1.x, v1.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v1
					    mad_pp oC0.xy, r0, c1.y, c1.z
					    mul r0.xy, c1.xwzw, v1.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c2.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[11];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "DisableBatching"="true" "RenderType"="TreeOpaque" }
 Pass {
  Tags { "DisableBatching"="true" "RenderType"="TreeOpaque" }
  GpuProgramID 301964
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float _SquashAmount;
					//   float4 _SquashPlaneNormal;
					//   row_major float4x4 _TerrainEngineBendTree;
					//   float4 _TreeInstanceScale;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   glstate_matrix_modelview0          c4       3
					//   glstate_matrix_invtrans_modelview0 c7       3
					//   _TerrainEngineBendTree             c10      3
					//   _ProjectionParams                  c13      1
					//   _TreeInstanceScale                 c14      1
					//   _SquashPlaneNormal                 c15      1
					//   _SquashAmount                      c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_position o0
					    dcl_texcoord o1
					    mul r0.xyz, c14, v0
					    dp3 r1.x, c10, r0
					    dp3 r1.y, c11, r0
					    dp3 r1.z, c12, r0
					    mad r1.xyz, v0, -c14, r1
					    mad r0.xyz, v2.w, r1, r0
					    dp3 r0.w, c15, r0
					    add r0.w, r0.w, c15.w
					    mad r1.xyz, r0.w, -c15, r0
					    lrp r2.xyz, c16.x, r0, r1
					    mov r2.w, c17.x
					    dp4 o0.x, c0, r2
					    dp4 o0.y, c1, r2
					    dp4 o0.z, c2, r2
					    dp4 o0.w, c3, r2
					    dp4 r0.x, c6, r2
					    mul r0.x, r0.x, c13.w
					    mov o1.w, -r0.x
					    dp3 r0.x, c7, v1
					    dp3 r0.y, c8, v1
					    dp3 r0.z, c9, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o1.xyz, r0.w, r0
					
					// approximately 24 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_2_0[6];
						vec4 _TreeInstanceScale;
						mat4x4 _TerrainEngineBendTree;
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_2_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz * _TreeInstanceScale.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _TerrainEngineBendTree[1].xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = (-in_POSITION0.xyz) * _TreeInstanceScale.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = in_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat6 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat6 = u_xlat6 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat6)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat2 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD0.w = (-u_xlat0.x);
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_2_0[6];
						vec4 _TreeInstanceScale;
						mat4x4 _TerrainEngineBendTree;
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_2_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz * _TreeInstanceScale.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _TerrainEngineBendTree[1].xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = (-in_POSITION0.xyz) * _TreeInstanceScale.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = in_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat6 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat6 = u_xlat6 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat6)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat2 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD0.w = (-u_xlat0.x);
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					    ps_3_0
					    def c0, 1, 0.281262308, 0.5, 255
					    def c1, 0.00392156886, 0, 0, 0
					    dcl_texcoord v0
					    add r0.x, c0.x, v0.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v0
					    mad_pp oC0.xy, r0, c0.y, c0.z
					    mul r0.xy, c0.xwzw, v0.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c1.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 8 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD0.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD0.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD0.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD0.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "DisableBatching"="true" "RenderType"="TreeTransparentCutout" }
 Pass {
  Tags { "DisableBatching"="true" "RenderType"="TreeTransparentCutout" }
  GpuProgramID 384599
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float _SquashAmount;
					//   float4 _SquashPlaneNormal;
					//   row_major float4x4 _TerrainEngineBendTree;
					//   float4 _TreeInstanceScale;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   glstate_matrix_modelview0          c4       3
					//   glstate_matrix_invtrans_modelview0 c7       3
					//   _TerrainEngineBendTree             c10      3
					//   _ProjectionParams                  c13      1
					//   _TreeInstanceScale                 c14      1
					//   _SquashPlaneNormal                 c15      1
					//   _SquashAmount                      c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    mul r0.xyz, c14, v0
					    dp3 r1.x, c10, r0
					    dp3 r1.y, c11, r0
					    dp3 r1.z, c12, r0
					    mad r1.xyz, v0, -c14, r1
					    mad r0.xyz, v2.w, r1, r0
					    dp3 r0.w, c15, r0
					    add r0.w, r0.w, c15.w
					    mad r1.xyz, r0.w, -c15, r0
					    lrp r2.xyz, c16.x, r0, r1
					    mov r2.w, c17.x
					    dp4 o0.x, c0, r2
					    dp4 o0.y, c1, r2
					    dp4 o0.z, c2, r2
					    dp4 o0.w, c3, r2
					    dp4 r0.x, c6, r2
					    mul r0.x, r0.x, c13.w
					    mov o2.w, -r0.x
					    dp3 r0.x, c7, v1
					    dp3 r0.y, c8, v1
					    dp3 r0.z, c9, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o2.xyz, r0.w, r0
					    mov o1.xy, v3
					
					// approximately 25 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_2_0[6];
						vec4 _TreeInstanceScale;
						mat4x4 _TerrainEngineBendTree;
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_2_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz * _TreeInstanceScale.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _TerrainEngineBendTree[1].xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = (-in_POSITION0.xyz) * _TreeInstanceScale.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = in_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat6 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat6 = u_xlat6 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat6)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_2_0[6];
						vec4 _TreeInstanceScale;
						mat4x4 _TerrainEngineBendTree;
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_2_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz * _TreeInstanceScale.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _TerrainEngineBendTree[1].xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = (-in_POSITION0.xyz) * _TreeInstanceScale.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = in_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat6 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat6 = u_xlat6 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat6)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Cutoff      c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0.281262308, 0.5, 255
					    def c2, 0.00392156886, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add_pp r0, r0.w, -c0.x
					    texkill r0
					    add r0.x, c1.x, v1.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v1
					    mad_pp oC0.xy, r0, c1.y, c1.z
					    mul r0.xy, c1.xwzw, v1.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c2.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
 Pass {
  Tags { "DisableBatching"="true" "RenderType"="TreeTransparentCutout" }
  Cull Front
  GpuProgramID 455931
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float _SquashAmount;
					//   float4 _SquashPlaneNormal;
					//   row_major float4x4 _TerrainEngineBendTree;
					//   float4 _TreeInstanceScale;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   glstate_matrix_modelview0          c4       3
					//   glstate_matrix_invtrans_modelview0 c7       3
					//   _TerrainEngineBendTree             c10      3
					//   _ProjectionParams                  c13      1
					//   _TreeInstanceScale                 c14      1
					//   _SquashPlaneNormal                 c15      1
					//   _SquashAmount                      c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    mul r0.xyz, c14, v0
					    dp3 r1.x, c10, r0
					    dp3 r1.y, c11, r0
					    dp3 r1.z, c12, r0
					    mad r1.xyz, v0, -c14, r1
					    mad r0.xyz, v2.w, r1, r0
					    dp3 r0.w, c15, r0
					    add r0.w, r0.w, c15.w
					    mad r1.xyz, r0.w, -c15, r0
					    lrp r2.xyz, c16.x, r0, r1
					    mov r2.w, c17.x
					    dp4 o0.x, c0, r2
					    dp4 o0.y, c1, r2
					    dp4 o0.z, c2, r2
					    dp4 o0.w, c3, r2
					    dp4 r0.x, c6, r2
					    mul r0.x, r0.x, c13.w
					    mov o2.w, -r0.x
					    dp3 r0.x, c7, v1
					    dp3 r0.y, c8, v1
					    dp3 r0.z, c9, v1
					    nrm r1.xyz, r0
					    mov o2.xyz, -r1
					    mov o1.xy, v3
					
					// approximately 26 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_2_0[6];
						vec4 _TreeInstanceScale;
						mat4x4 _TerrainEngineBendTree;
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_2_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz * _TreeInstanceScale.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _TerrainEngineBendTree[1].xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = (-in_POSITION0.xyz) * _TreeInstanceScale.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = in_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat6 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat6 = u_xlat6 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat6)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = (-u_xlat0.xyz);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_2_0[6];
						vec4 _TreeInstanceScale;
						mat4x4 _TerrainEngineBendTree;
						vec4 _SquashPlaneNormal;
						float _SquashAmount;
						vec4 unused_2_5[4];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz * _TreeInstanceScale.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _TerrainEngineBendTree[1].xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _TerrainEngineBendTree[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = (-in_POSITION0.xyz) * _TreeInstanceScale.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = in_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat6 = dot(_SquashPlaneNormal.xyz, u_xlat0.xyz);
					    u_xlat6 = u_xlat6 + _SquashPlaneNormal.w;
					    u_xlat1.xyz = (-vec3(u_xlat6)) * _SquashPlaneNormal.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(_SquashAmount) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = (-u_xlat0.xyz);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Cutoff      c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0.281262308, 0.5, 255
					    def c2, 0.00392156886, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add_pp r0, r0.w, -c0.x
					    texkill r0
					    add r0.x, c1.x, v1.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v1
					    mad_pp oC0.xy, r0, c1.y, c1.z
					    mul r0.xy, c1.xwzw, v1.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c2.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "RenderType"="TreeBillboard" }
 Pass {
  Tags { "RenderType"="TreeBillboard" }
  Cull Off
  GpuProgramID 483439
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float4 _TreeBillboardCameraFront;
					//   float4 _TreeBillboardCameraPos;
					//   float3 _TreeBillboardCameraRight;
					//   float4 _TreeBillboardCameraUp;
					//   float4 _TreeBillboardDistances;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_modelview0 c4       3
					//   _ProjectionParams         c7       1
					//   _TreeBillboardCameraRight c8       1
					//   _TreeBillboardCameraUp    c9       1
					//   _TreeBillboardCameraFront c10      1
					//   _TreeBillboardCameraPos   c11      1
					//   _TreeBillboardDistances   c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    add r0.xyz, -c11, v0
					    dp3 r0.x, r0, r0
					    slt r0.x, c12.x, r0.x
					    mov r1.xy, v2
					    mov r1.z, v1.y
					    mad r0.xyz, r0.x, -r1, r1
					    mad r1.xyz, c8, r0.x, v0
					    lrp r1.w, c11.w, r0.z, r0.y
					    mul r0.xyz, r0_abs.x, c10
					    mad r1.xyz, c9, r1.w, r1
					    mad r0.xyz, r0, c9.w, r1
					    mov r0.w, c13.x
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mul r0.x, r0.x, c7.w
					    mov o2.w, -r0.x
					    slt o1.y, c13.y, v1.y
					    mov o1.x, v1.x
					    mov o2.xyz, c13.yyxw
					
					// approximately 22 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_2_0[12];
						vec3 _TreeBillboardCameraRight;
						vec4 _TreeBillboardCameraUp;
						vec4 _TreeBillboardCameraFront;
						vec4 _TreeBillboardCameraPos;
						vec4 _TreeBillboardDistances;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz + (-_TreeBillboardCameraPos.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb0 = _TreeBillboardDistances.x<u_xlat0.x;
					    u_xlat1.xy = in_TEXCOORD1.xy;
					    u_xlat1.z = in_TEXCOORD0.y;
					    u_xlat0.xyz = (bool(u_xlatb0)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
					    u_xlat4 = (-u_xlat0.y) + u_xlat0.z;
					    u_xlat2 = _TreeBillboardCameraPos.w * u_xlat4 + u_xlat0.y;
					    u_xlat1.xyz = vec3(_TreeBillboardCameraRight.x, _TreeBillboardCameraRight.y, _TreeBillboardCameraRight.z) * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat0.xzw = abs(u_xlat0.xxx) * _TreeBillboardCameraFront.xyz;
					    u_xlat1.xyz = _TreeBillboardCameraUp.xyz * vec3(u_xlat2) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * _TreeBillboardCameraUp.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb6 = 0.0<in_TEXCOORD0.y;
					    vs_TEXCOORD0.y = u_xlatb6 ? 1.0 : float(0.0);
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    u_xlat2 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityTerrain {
						vec4 unused_2_0[12];
						vec3 _TreeBillboardCameraRight;
						vec4 _TreeBillboardCameraUp;
						vec4 _TreeBillboardCameraFront;
						vec4 _TreeBillboardCameraPos;
						vec4 _TreeBillboardDistances;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz + (-_TreeBillboardCameraPos.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb0 = _TreeBillboardDistances.x<u_xlat0.x;
					    u_xlat1.xy = in_TEXCOORD1.xy;
					    u_xlat1.z = in_TEXCOORD0.y;
					    u_xlat0.xyz = (bool(u_xlatb0)) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
					    u_xlat4 = (-u_xlat0.y) + u_xlat0.z;
					    u_xlat2 = _TreeBillboardCameraPos.w * u_xlat4 + u_xlat0.y;
					    u_xlat1.xyz = vec3(_TreeBillboardCameraRight.x, _TreeBillboardCameraRight.y, _TreeBillboardCameraRight.z) * u_xlat0.xxx + in_POSITION0.xyz;
					    u_xlat0.xzw = abs(u_xlat0.xxx) * _TreeBillboardCameraFront.xyz;
					    u_xlat1.xyz = _TreeBillboardCameraUp.xyz * vec3(u_xlat2) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * _TreeBillboardCameraUp.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb6 = 0.0<in_TEXCOORD0.y;
					    vs_TEXCOORD0.y = u_xlatb6 ? 1.0 : float(0.0);
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    u_xlat2 = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat2;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    vs_TEXCOORD1.xyz = vec3(0.0, 0.0, 1.0);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, -0.00100000005, 1, 0.281262308, 0.5
					    def c1, 1, 255, 0.00392156886, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add_pp r0, r0.w, c0.x
					    texkill r0
					    add r0.x, c0.y, v1.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v1
					    mad_pp oC0.xy, r0, c0.z, c0.w
					    mul r0.xy, c1, v1.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c1.z, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w + -0.00100000005;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w + -0.00100000005;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "RenderType"="GrassBillboard" }
 Pass {
  Tags { "RenderType"="GrassBillboard" }
  Cull Off
  GpuProgramID 581678
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _CameraPosition;
					//   float3 _CameraRight;
					//   float3 _CameraUp;
					//   float4 _ProjectionParams;
					//   float4 _WaveAndDistance;
					//   float4 _WavingTint;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   glstate_matrix_modelview0          c4       3
					//   glstate_matrix_invtrans_modelview0 c7       3
					//   _ProjectionParams                  c10      1
					//   _WavingTint                        c11      1
					//   _WaveAndDistance                   c12      1
					//   _CameraPosition                    c13      1
					//   _CameraRight                       c14      1
					//   _CameraUp                          c15      1
					//
					
					    vs_3_0
					    def c16, 1.20000005, 2, 1.60000002, 4.80000019
					    def c17, 6.40884876, -3.14159274, 0.00833330024, -0.000198409994
					    def c18, 0.00600000005, 0.0199999996, 0.0500000007, -0.161616161
					    def c19, 0.674199879, 0.269679934, 0.134839967, 0.699999988
					    def c20, 0.0240000002, 0.0399999991, -0.119999997, 0.0960000008
					    def c21, 0.00600000005, 0.0199999996, -0.0199999996, 0.100000001
					    def c22, -0.5, 0.5, 1, 0
					    def c23, 0.0120000001, 0.0199999996, 0.0599999987, 0.0240000002
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_color v4
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2.xy
					    dcl_texcoord1 o3
					    add r0.xyz, -c13, v0
					    dp3 r0.x, r0, r0
					    slt r0.x, c12.w, r0.x
					    mad r0.xy, r0.x, -v1, v1
					    mad r0.xzw, r0.x, c14.xyyz, v0.xyyz
					    mad r0.xyz, r0.y, c15, r0.xzww
					    mul r1.xy, r0.xzzw, c12.y
					    mul r2, r1.y, c18.xyyz
					    mad r1, r1.x, c23, r2
					    mov r2.x, c12.x
					    mad r1, r2.x, c16, r1
					    frc r1, r1
					    mad r1, r1, c17.x, c17.y
					    mul r2, r1, r1
					    mul r3, r1, r2
					    mad r1, r3, c18.w, r1
					    mul r3, r2, r3
					    mul r2, r2, r3
					    mad r1, r3, c17.z, r1
					    mad r1, r2, c17.w, r1
					    mul r1, r1, r1
					    mul r1, r1, r1
					    mul r2, r1, v1.y
					    dp4 r1.x, r1, c19.xxyz
					    mul r1.x, r1.x, c19.w
					    dp4 r3.x, r2, c20
					    dp4 r3.z, r2, c21
					    mad r0.xz, r3, -c12.z, r0
					    add r1.yzw, r0.xxyz, -c13.xxyz
					    dp3 r1.y, r1.yzww, r1.yzww
					    add r1.y, -r1.y, c12.w
					    add r1.y, r1.y, r1.y
					    mul_sat o1.w, r1.y, c13.w
					    mov r2.x, c22.x
					    add r1.yzw, r2.x, c11.xxyz
					    mad r1.xyz, r1.x, r1.yzww, c22.y
					    mul r1.xyz, r1, v4
					    add o1.xyz, r1, r1
					    mov r0.w, c22.z
					    dp4 o0.x, c0, r0
					    dp4 o0.y, c1, r0
					    dp4 o0.z, c2, r0
					    dp4 o0.w, c3, r0
					    dp4 r0.x, c6, r0
					    mul r0.x, r0.x, c10.w
					    mov o3.w, -r0.x
					    dp3 r0.x, c7, v2
					    dp3 r0.y, c8, v2
					    dp3 r0.z, c9, v2
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov o2.xy, v3
					
					// approximately 53 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 _WavingTint;
						vec4 _WaveAndDistance;
						vec4 _CameraPosition;
						vec3 _CameraRight;
						vec3 _CameraUp;
						vec4 unused_2_5[12];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz + (-_CameraPosition.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb0 = _WaveAndDistance.w<u_xlat0.x;
					    u_xlat0.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : in_TANGENT0.xy;
					    u_xlat0.xzw = u_xlat0.xxx * _CameraRight.xyz + in_POSITION0.xyz;
					    u_xlat0.xyz = u_xlat0.yyy * _CameraUp.xyz + u_xlat0.xzw;
					    u_xlat1.xy = u_xlat0.xz * _WaveAndDistance.yy;
					    u_xlat2 = u_xlat1.yyyy * vec4(0.00600000005, 0.0199999996, 0.0199999996, 0.0500000007);
					    u_xlat1 = u_xlat1.xxxx * vec4(0.0120000001, 0.0199999996, 0.0599999987, 0.0240000002) + u_xlat2;
					    u_xlat1 = _WaveAndDistance.xxxx * vec4(1.20000005, 2.0, 1.60000002, 4.80000019) + u_xlat1;
					    u_xlat1 = fract(u_xlat1);
					    u_xlat1 = u_xlat1 * vec4(6.40884876, 6.40884876, 6.40884876, 6.40884876) + vec4(-3.14159274, -3.14159274, -3.14159274, -3.14159274);
					    u_xlat2 = u_xlat1 * u_xlat1;
					    u_xlat3 = u_xlat1 * u_xlat2;
					    u_xlat1 = u_xlat3 * vec4(-0.161616161, -0.161616161, -0.161616161, -0.161616161) + u_xlat1;
					    u_xlat3 = u_xlat2 * u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat1 = u_xlat3 * vec4(0.00833330024, 0.00833330024, 0.00833330024, 0.00833330024) + u_xlat1;
					    u_xlat1 = u_xlat2 * vec4(-0.000198409994, -0.000198409994, -0.000198409994, -0.000198409994) + u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat2 = u_xlat1 * in_TANGENT0.yyyy;
					    u_xlat12 = dot(u_xlat1, vec4(0.674199879, 0.674199879, 0.269679934, 0.134839967));
					    u_xlat12 = u_xlat12 * 0.699999988;
					    u_xlat1.x = dot(u_xlat2, vec4(0.0240000002, 0.0399999991, -0.119999997, 0.0960000008));
					    u_xlat1.z = dot(u_xlat2, vec4(0.00600000005, 0.0199999996, -0.0199999996, 0.100000001));
					    u_xlat0.xz = (-u_xlat1.xz) * _WaveAndDistance.zz + u_xlat0.xz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat1.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat1.x;
					    u_xlat1.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz + (-_CameraPosition.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = (-u_xlat0.x) + _WaveAndDistance.w;
					    vs_COLOR0.w = dot(_CameraPosition.ww, u_xlat0.xx);
					    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
					    u_xlat0.x = u_xlat1.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.xyz = _WavingTint.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 _WavingTint;
						vec4 _WaveAndDistance;
						vec4 _CameraPosition;
						vec3 _CameraRight;
						vec3 _CameraUp;
						vec4 unused_2_5[12];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.xyz + (-_CameraPosition.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb0 = _WaveAndDistance.w<u_xlat0.x;
					    u_xlat0.xy = (bool(u_xlatb0)) ? vec2(0.0, 0.0) : in_TANGENT0.xy;
					    u_xlat0.xzw = u_xlat0.xxx * _CameraRight.xyz + in_POSITION0.xyz;
					    u_xlat0.xyz = u_xlat0.yyy * _CameraUp.xyz + u_xlat0.xzw;
					    u_xlat1.xy = u_xlat0.xz * _WaveAndDistance.yy;
					    u_xlat2 = u_xlat1.yyyy * vec4(0.00600000005, 0.0199999996, 0.0199999996, 0.0500000007);
					    u_xlat1 = u_xlat1.xxxx * vec4(0.0120000001, 0.0199999996, 0.0599999987, 0.0240000002) + u_xlat2;
					    u_xlat1 = _WaveAndDistance.xxxx * vec4(1.20000005, 2.0, 1.60000002, 4.80000019) + u_xlat1;
					    u_xlat1 = fract(u_xlat1);
					    u_xlat1 = u_xlat1 * vec4(6.40884876, 6.40884876, 6.40884876, 6.40884876) + vec4(-3.14159274, -3.14159274, -3.14159274, -3.14159274);
					    u_xlat2 = u_xlat1 * u_xlat1;
					    u_xlat3 = u_xlat1 * u_xlat2;
					    u_xlat1 = u_xlat3 * vec4(-0.161616161, -0.161616161, -0.161616161, -0.161616161) + u_xlat1;
					    u_xlat3 = u_xlat2 * u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat1 = u_xlat3 * vec4(0.00833330024, 0.00833330024, 0.00833330024, 0.00833330024) + u_xlat1;
					    u_xlat1 = u_xlat2 * vec4(-0.000198409994, -0.000198409994, -0.000198409994, -0.000198409994) + u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat2 = u_xlat1 * in_TANGENT0.yyyy;
					    u_xlat12 = dot(u_xlat1, vec4(0.674199879, 0.674199879, 0.269679934, 0.134839967));
					    u_xlat12 = u_xlat12 * 0.699999988;
					    u_xlat1.x = dot(u_xlat2, vec4(0.0240000002, 0.0399999991, -0.119999997, 0.0960000008));
					    u_xlat1.z = dot(u_xlat2, vec4(0.00600000005, 0.0199999996, -0.0199999996, 0.100000001));
					    u_xlat0.xz = (-u_xlat1.xz) * _WaveAndDistance.zz + u_xlat0.xz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * glstate_matrix_modelview0[1].z;
					    u_xlat1.x = glstate_matrix_modelview0[0].z * u_xlat0.x + u_xlat1.x;
					    u_xlat1.x = glstate_matrix_modelview0[2].z * u_xlat0.z + u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xyz + (-_CameraPosition.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = (-u_xlat0.x) + _WaveAndDistance.w;
					    vs_COLOR0.w = dot(_CameraPosition.ww, u_xlat0.xx);
					    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
					    u_xlat0.x = u_xlat1.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.xyz = _WavingTint.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD1.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Cutoff      c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0.281262308, 0.5, 255
					    def c2, 0.00392156886, 0, 0, 0
					    dcl_color_pp v0.w
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2
					    dcl_2d s0
					    texld_pp r0, v1, s0
					    mad_pp r0, r0.w, v0.w, -c0.x
					    texkill r0
					    add r0.x, c1.x, v2.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v2
					    mad_pp oC0.xy, r0, c1.y, c1.z
					    mul r0.xy, c1.xwzw, v2.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c2.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "RenderType"="Grass" }
 Pass {
  Tags { "RenderType"="Grass" }
  Cull Off
  GpuProgramID 626990
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _CameraPosition;
					//   float4 _ProjectionParams;
					//   float4 _WaveAndDistance;
					//   float4 _WavingTint;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   glstate_matrix_modelview0          c4       3
					//   glstate_matrix_invtrans_modelview0 c7       3
					//   _ProjectionParams                  c10      1
					//   _WavingTint                        c11      1
					//   _WaveAndDistance                   c12      1
					//   _CameraPosition                    c13      1
					//
					
					    vs_3_0
					    def c14, 0.0120000001, 0.0199999996, 0.0599999987, 0.0240000002
					    def c15, 0.00600000005, 0.0199999996, 0.0500000007, -0.161616161
					    def c16, 1.20000005, 2, 1.60000002, 4.80000019
					    def c17, 6.40884876, -3.14159274, 0.00833330024, -0.000198409994
					    def c18, 0.674199879, 0.269679934, 0.134839967, 0.699999988
					    def c19, 0.0240000002, 0.0399999991, -0.119999997, 0.0960000008
					    def c20, 0.00600000005, 0.0199999996, -0.0199999996, 0.100000001
					    def c21, -0.5, 0.5, 1, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_color v3
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2.xy
					    dcl_texcoord1 o3
					    mul r0.xy, c12.y, v0.xzzw
					    mul r1, r0.y, c15.xyyz
					    mad r0, r0.x, c14, r1
					    mov r1.x, c12.x
					    mad r0, r1.x, c16, r0
					    frc r0, r0
					    mad r0, r0, c17.x, c17.y
					    mul r1, r0, r0
					    mul r2, r0, r1
					    mad r0, r2, c15.w, r0
					    mul r2, r1, r2
					    mul r1, r1, r2
					    mad r0, r2, c17.z, r0
					    mad r0, r1, c17.w, r0
					    mul r0, r0, r0
					    mul r0, r0, r0
					    mul r1.x, c12.z, v3.w
					    mul r1, r0, r1.x
					    dp4 r0.x, r0, c18.xxyz
					    mul r0.x, r0.x, c18.w
					    dp4 r2.x, r1, c19
					    dp4 r2.z, r1, c20
					    mad r1.xz, r2, -c12.z, v0
					    mov r1.y, v0.y
					    add r0.yzw, r1.xxyz, -c13.xxyz
					    dp3 r0.y, r0.yzww, r0.yzww
					    add r0.y, -r0.y, c12.w
					    add r0.y, r0.y, r0.y
					    mul_sat o1.w, r0.y, c13.w
					    mov r2.x, c21.x
					    add r0.yzw, r2.x, c11.xxyz
					    mad r0.xyz, r0.x, r0.yzww, c21.y
					    mul r0.xyz, r0, v3
					    add o1.xyz, r0, r0
					    mov r1.w, c21.z
					    dp4 o0.x, c0, r1
					    dp4 o0.y, c1, r1
					    dp4 o0.z, c2, r1
					    dp4 o0.w, c3, r1
					    dp4 r0.x, c6, r1
					    mul r0.x, r0.x, c10.w
					    mov o3.w, -r0.x
					    dp3 r0.x, c7, v1
					    dp3 r0.y, c8, v1
					    dp3 r0.z, c9, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    mov o2.xy, v2
					
					// approximately 49 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 _WavingTint;
						vec4 _WaveAndDistance;
						vec4 _CameraPosition;
						vec4 unused_2_3[14];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
					    u_xlat1 = u_xlat0.yyyy * vec4(0.00600000005, 0.0199999996, 0.0199999996, 0.0500000007);
					    u_xlat0 = u_xlat0.xxxx * vec4(0.0120000001, 0.0199999996, 0.0599999987, 0.0240000002) + u_xlat1;
					    u_xlat0 = _WaveAndDistance.xxxx * vec4(1.20000005, 2.0, 1.60000002, 4.80000019) + u_xlat0;
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = u_xlat0 * vec4(6.40884876, 6.40884876, 6.40884876, 6.40884876) + vec4(-3.14159274, -3.14159274, -3.14159274, -3.14159274);
					    u_xlat1 = u_xlat0 * u_xlat0;
					    u_xlat2 = u_xlat0 * u_xlat1;
					    u_xlat0 = u_xlat2 * vec4(-0.161616161, -0.161616161, -0.161616161, -0.161616161) + u_xlat0;
					    u_xlat2 = u_xlat1 * u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat0 = u_xlat2 * vec4(0.00833330024, 0.00833330024, 0.00833330024, 0.00833330024) + u_xlat0;
					    u_xlat0 = u_xlat1 * vec4(-0.000198409994, -0.000198409994, -0.000198409994, -0.000198409994) + u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat1.x = in_COLOR0.w * _WaveAndDistance.z;
					    u_xlat1 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat0.x = dot(u_xlat0, vec4(0.674199879, 0.674199879, 0.269679934, 0.134839967));
					    u_xlat0.x = u_xlat0.x * 0.699999988;
					    u_xlat2.x = dot(u_xlat1, vec4(0.0240000002, 0.0399999991, -0.119999997, 0.0960000008));
					    u_xlat2.z = dot(u_xlat1, vec4(0.00600000005, 0.0199999996, -0.0199999996, 0.100000001));
					    u_xlat1.xz = (-u_xlat2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
					    u_xlat2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat2 = glstate_matrix_mvp[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = glstate_matrix_mvp[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat2 + glstate_matrix_mvp[3];
					    u_xlat3.xyz = _WavingTint.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz + u_xlat0.xyz;
					    u_xlat1.y = in_POSITION0.y;
					    u_xlat0.xyz = u_xlat1.xyz + (-_CameraPosition.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = (-u_xlat0.x) + _WaveAndDistance.w;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    vs_COLOR0.w = u_xlat0.x * _CameraPosition.w;
					    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityTerrain {
						vec4 _WavingTint;
						vec4 _WaveAndDistance;
						vec4 _CameraPosition;
						vec4 unused_2_3[14];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_COLOR0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xz * _WaveAndDistance.yy;
					    u_xlat1 = u_xlat0.yyyy * vec4(0.00600000005, 0.0199999996, 0.0199999996, 0.0500000007);
					    u_xlat0 = u_xlat0.xxxx * vec4(0.0120000001, 0.0199999996, 0.0599999987, 0.0240000002) + u_xlat1;
					    u_xlat0 = _WaveAndDistance.xxxx * vec4(1.20000005, 2.0, 1.60000002, 4.80000019) + u_xlat0;
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = u_xlat0 * vec4(6.40884876, 6.40884876, 6.40884876, 6.40884876) + vec4(-3.14159274, -3.14159274, -3.14159274, -3.14159274);
					    u_xlat1 = u_xlat0 * u_xlat0;
					    u_xlat2 = u_xlat0 * u_xlat1;
					    u_xlat0 = u_xlat2 * vec4(-0.161616161, -0.161616161, -0.161616161, -0.161616161) + u_xlat0;
					    u_xlat2 = u_xlat1 * u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat0 = u_xlat2 * vec4(0.00833330024, 0.00833330024, 0.00833330024, 0.00833330024) + u_xlat0;
					    u_xlat0 = u_xlat1 * vec4(-0.000198409994, -0.000198409994, -0.000198409994, -0.000198409994) + u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat1.x = in_COLOR0.w * _WaveAndDistance.z;
					    u_xlat1 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat0.x = dot(u_xlat0, vec4(0.674199879, 0.674199879, 0.269679934, 0.134839967));
					    u_xlat0.x = u_xlat0.x * 0.699999988;
					    u_xlat2.x = dot(u_xlat1, vec4(0.0240000002, 0.0399999991, -0.119999997, 0.0960000008));
					    u_xlat2.z = dot(u_xlat1, vec4(0.00600000005, 0.0199999996, -0.0199999996, 0.100000001));
					    u_xlat1.xz = (-u_xlat2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
					    u_xlat2 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat2 = glstate_matrix_mvp[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = glstate_matrix_mvp[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat2 + glstate_matrix_mvp[3];
					    u_xlat3.xyz = _WavingTint.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz + u_xlat0.xyz;
					    u_xlat1.y = in_POSITION0.y;
					    u_xlat0.xyz = u_xlat1.xyz + (-_CameraPosition.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = (-u_xlat0.x) + _WaveAndDistance.w;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    vs_COLOR0.w = u_xlat0.x * _CameraPosition.w;
					    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.x = in_POSITION0.y * glstate_matrix_modelview0[1].z;
					    u_xlat0.x = glstate_matrix_modelview0[0].z * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_modelview0[2].z * u_xlat1.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + glstate_matrix_modelview0[3].z;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.w;
					    vs_TEXCOORD1.w = (-u_xlat0.x);
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float _Cutoff;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Cutoff      c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0.281262308, 0.5, 255
					    def c2, 0.00392156886, 0, 0, 0
					    dcl_color_pp v0.w
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2
					    dcl_2d s0
					    texld_pp r0, v1, s0
					    mad_pp r0, r0.w, v0.w, -c0.x
					    texkill r0
					    add r0.x, c1.x, v2.z
					    rcp r0.x, r0.x
					    mul r0.xy, r0.x, v2
					    mad_pp oC0.xy, r0, c1.y, c1.z
					    mul r0.xy, c1.xwzw, v2.w
					    frc r0.xy, r0
					    mad_pp oC0.z, r0.y, -c2.x, r0.x
					    mov_pp oC0.w, r0.y
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Cutoff;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat0.w * vs_COLOR0.w + (-_Cutoff);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = vs_TEXCOORD1.z + 1.0;
					    u_xlat0.xy = vs_TEXCOORD1.xy / u_xlat0.xx;
					    SV_Target0.xy = u_xlat0.xy * vec2(0.281262308, 0.281262308) + vec2(0.5, 0.5);
					    u_xlat0.xy = vs_TEXCOORD1.ww * vec2(1.0, 255.0);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    SV_Target0.z = (-u_xlat0.y) * 0.00392156886 + u_xlat0.x;
					    SV_Target0.w = u_xlat0.y;
					    return;
					}"
}
}
 }
}
Fallback Off
}