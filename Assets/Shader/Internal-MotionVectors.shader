Shader "Hidden/Internal-MotionVectors" {
SubShader { 
 Pass {
  Tags { "LIGHTMODE"="MotionVectors" }
  ZWrite Off
  GpuProgramID 53062
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   bool _HasLastPositionData;
					//   float _MotionVectorDepthBias;
					//   row_major float4x4 _NonJitteredVP;
					//   row_major float4x4 _PreviousM;
					//   row_major float4x4 _PreviousVP;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   glstate_matrix_mvp     c0       4
					//   unity_ObjectToWorld    c4       4
					//   _NonJitteredVP         c8       4
					//   _PreviousVP            c12      4
					//   _PreviousM             c16      4
					//   _HasLastPositionData   c20      1
					//   _MotionVectorDepthBias c21      1
					//
					
					    vs_3_0
					    def c22, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord o0
					    dcl_texcoord1 o1
					    dcl_position o2
					    mad r0, v0.xyzx, c22.xxxy, c22.yyyx
					    dp4 o2.x, c0, r0
					    dp4 o2.y, c1, r0
					    dp4 r1.x, c2, r0
					    dp4 r0.x, c3, r0
					    mad o2.z, c21.x, r0.x, r1.x
					    mov o2.w, r0.x
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    dp4 r0.w, c7, v0
					    dp4 o0.x, c8, r0
					    dp4 o0.y, c9, r0
					    dp4 o0.z, c10, r0
					    dp4 o0.w, c11, r0
					    mad r0, v1.xyzx, c22.xxxy, c22.yyyx
					    lrp r1, c20.x, r0, v0
					    dp4 r0.x, c16, r1
					    dp4 r0.y, c17, r1
					    dp4 r0.z, c18, r1
					    dp4 r0.w, c19, r1
					    dp4 o1.x, c12, r0
					    dp4 o1.y, c13, r0
					    dp4 o1.z, c14, r0
					    dp4 o1.w, c15, r0
					
					// approximately 25 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						mat4x4 _NonJitteredVP;
						mat4x4 _PreviousVP;
						mat4x4 _PreviousM;
						int _HasLastPositionData;
						float _MotionVectorDepthBias;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_3[6];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _NonJitteredVP[1];
					    u_xlat1 = _NonJitteredVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _NonJitteredVP[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD0 = _NonJitteredVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xyz = in_NORMAL0.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat0 = (_HasLastPositionData != 0) ? u_xlat0 : in_POSITION0;
					    u_xlat1 = u_xlat0.yyyy * _PreviousM[1];
					    u_xlat1 = _PreviousM[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _PreviousM[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = _PreviousM[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * _PreviousVP[1];
					    u_xlat1 = _PreviousVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _PreviousVP[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _PreviousVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position.z = _MotionVectorDepthBias * u_xlat0.w + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						mat4x4 _NonJitteredVP;
						mat4x4 _PreviousVP;
						mat4x4 _PreviousM;
						int _HasLastPositionData;
						float _MotionVectorDepthBias;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_3[6];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * _NonJitteredVP[1];
					    u_xlat1 = _NonJitteredVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _NonJitteredVP[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD0 = _NonJitteredVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xyz = in_NORMAL0.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat0 = (_HasLastPositionData != 0) ? u_xlat0 : in_POSITION0;
					    u_xlat1 = u_xlat0.yyyy * _PreviousM[1];
					    u_xlat1 = _PreviousM[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _PreviousM[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = _PreviousM[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * _PreviousVP[1];
					    u_xlat1 = _PreviousVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = _PreviousVP[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _PreviousVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position.z = _MotionVectorDepthBias * u_xlat0.w + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					    ps_3_0
					    def c0, 1, 0.5, 0, 0
					    dcl_texcoord v0.xyw
					    dcl_texcoord1 v1.xyw
					    rcp r0.x, v0.w
					    mad r0.xy, v0, r0.x, c0.x
					    mul r0.x, r0.x, c0.y
					    mad r0.z, r0.y, -c0.y, c0.x
					    rcp r0.y, v1.w
					    mad r0.yw, v1.xxzy, r0.y, c0.x
					    mul r1.x, r0.y, c0.y
					    mad r1.z, r0.w, -c0.y, c0.x
					    add_pp oC0.xy, r0.xzzw, -r1.xzzw
					    mov_pp oC0.zw, c0.xyzx
					
					// approximately 10 instruction slots used"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat0.z = (-u_xlat0.y) * 0.5 + 1.0;
					    u_xlat2.xz = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
					    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
					    u_xlat1.x = u_xlat2.x * 0.5;
					    u_xlat1.z = (-u_xlat2.z) * 0.5 + 1.0;
					    SV_Target0.xy = u_xlat0.xz + (-u_xlat1.xz);
					    SV_Target0.zw = vec2(0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat0.z = (-u_xlat0.y) * 0.5 + 1.0;
					    u_xlat2.xz = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
					    u_xlat2.xz = u_xlat2.xz + vec2(1.0, 1.0);
					    u_xlat1.x = u_xlat2.x * 0.5;
					    u_xlat1.z = (-u_xlat2.z) * 0.5 + 1.0;
					    SV_Target0.xy = u_xlat0.xz + (-u_xlat1.xz);
					    SV_Target0.zw = vec2(0.0, 1.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 117800
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _ProjectionParams  c4       1
					//   _ScreenParams      c5       1
					//
					
					    vs_3_0
					    def c6, 1, 0, -1, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    mad r0, v0.xyzx, c6.xxxy, c6.yyyx
					    dp4 o0.z, c2, r0
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r1.w, c3, r0
					    mov r0.z, c6.z
					    add r0.xy, r0.z, c5.zwzw
					    mov r1.xy, c6.xzzw
					    mul r0.xy, r0, r1.wxzw
					    mad r1.xy, r0, r1.ywzw, r2
					    mul r0.xz, r1.xyww, c6.w
					    mov o0.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c6.w
					    mad o1.xy, r0.z, c5.zwzw, r0.xwzw
					    mov o2.xyz, v1
					
					// approximately 16 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   row_major float4x4 _NonJitteredVP;
					//   row_major float4x4 _PreviousVP;
					//   float4 _ProjectionParams;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_CameraToWorld c0       4
					//   _NonJitteredVP      c4       4
					//   _PreviousVP         c8       4
					//   _ProjectionParams   c12      1
					//   _ZBufferParams      c13      1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c14, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_2d s0
					    texld r0, v0, s0
					    mad r0.x, c13.x, r0.x, c13.y
					    rcp r0.x, r0.x
					    rcp r0.y, v1.z
					    mul r0.y, r0.y, c12.z
					    mul r0.yzw, r0.y, v1.xxyz
					    mul r0.xyz, r0.x, r0.yzww
					    mov r0.w, c14.x
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c11, r1
					    rcp r0.x, r0.x
					    dp4 r2.x, c8, r1
					    dp4 r2.y, c9, r1
					    mad r0.xy, r2, r0.x, c14.x
					    mul r0.x, r0.x, c14.y
					    mad r0.z, r0.y, -c14.y, c14.x
					    dp4 r0.y, c7, r1
					    rcp r0.y, r0.y
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    mad r0.yw, r2.xxzy, r0.y, c14.x
					    mul r1.x, r0.y, c14.y
					    mad r1.z, r0.w, -c14.y, c14.x
					    add_pp oC0.xy, -r0.xzzw, r1.xzzw
					    mov_pp oC0.zw, c14.xyzx
					
					// approximately 28 instruction slots used (1 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						mat4x4 _NonJitteredVP;
						mat4x4 _PreviousVP;
						vec4 unused_0_3[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2;
						vec4 _ZBufferParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[18];
						mat4x4 unity_CameraToWorld;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3.x = _ProjectionParams.z / vs_TEXCOORD1.z;
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * _PreviousVP[1].xyw;
					    u_xlat1.xyz = _PreviousVP[0].xyw * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PreviousVP[2].xyw * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PreviousVP[3].xyw * u_xlat0.www + u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.x = u_xlat1.x * 0.5;
					    u_xlat1.z = (-u_xlat1.y) * 0.5 + 1.0;
					    u_xlat2.xyz = u_xlat0.yyy * _NonJitteredVP[1].xyw;
					    u_xlat2.xyz = _NonJitteredVP[0].xyw * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = _NonJitteredVP[2].xyw * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = _NonJitteredVP[3].xyw * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat0.z = (-u_xlat0.y) * 0.5 + 1.0;
					    SV_Target0.xy = (-u_xlat1.xz) + u_xlat0.xz;
					    SV_Target0.zw = vec2(0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						mat4x4 _NonJitteredVP;
						mat4x4 _PreviousVP;
						vec4 unused_0_3[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2;
						vec4 _ZBufferParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[18];
						mat4x4 unity_CameraToWorld;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat3.x = _ProjectionParams.z / vs_TEXCOORD1.z;
					    u_xlat3.xyz = u_xlat3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * _PreviousVP[1].xyw;
					    u_xlat1.xyz = _PreviousVP[0].xyw * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PreviousVP[2].xyw * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PreviousVP[3].xyw * u_xlat0.www + u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.x = u_xlat1.x * 0.5;
					    u_xlat1.z = (-u_xlat1.y) * 0.5 + 1.0;
					    u_xlat2.xyz = u_xlat0.yyy * _NonJitteredVP[1].xyw;
					    u_xlat2.xyz = _NonJitteredVP[0].xyw * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = _NonJitteredVP[2].xyw * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = _NonJitteredVP[3].xyw * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat0.z = (-u_xlat0.y) * 0.5 + 1.0;
					    SV_Target0.xy = (-u_xlat1.xz) + u_xlat0.xz;
					    SV_Target0.zw = vec2(0.0, 1.0);
					    return;
					}"
}
}
 }
 Pass {
  ZTest Always
  Cull Off
  GpuProgramID 164871
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _ProjectionParams  c4       1
					//   _ScreenParams      c5       1
					//
					
					    vs_3_0
					    def c6, 1, 0, -1, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    mad r0, v0.xyzx, c6.xxxy, c6.yyyx
					    dp4 o0.z, c2, r0
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r1.w, c3, r0
					    mov r0.z, c6.z
					    add r0.xy, r0.z, c5.zwzw
					    mov r1.xy, c6.xzzw
					    mul r0.xy, r0, r1.wxzw
					    mad r1.xy, r0, r1.ywzw, r2
					    mul r0.xz, r1.xyww, c6.w
					    mov o0.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c6.w
					    mad o1.xy, r0.z, c5.zwzw, r0.xwzw
					    mov o2.xyz, v1
					
					// approximately 16 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   row_major float4x4 _NonJitteredVP;
					//   row_major float4x4 _PreviousVP;
					//   float4 _ProjectionParams;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_CameraToWorld c0       4
					//   _NonJitteredVP      c4       4
					//   _PreviousVP         c8       4
					//   _ProjectionParams   c12      1
					//   _ZBufferParams      c13      1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c14, 1, 0.5, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_2d s0
					    rcp r0.x, v1.z
					    mul r0.x, r0.x, c12.z
					    mul r0.xyz, r0.x, v1
					    texld r1, v0, s0
					    mad r0.w, c13.x, r1.x, c13.y
					    mov oDepth, r1.x
					    rcp r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov r0.w, c14.x
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c11, r1
					    rcp r0.x, r0.x
					    dp4 r2.x, c8, r1
					    dp4 r2.y, c9, r1
					    mad r0.xy, r2, r0.x, c14.x
					    mul r0.x, r0.x, c14.y
					    mad r0.z, r0.y, -c14.y, c14.x
					    dp4 r0.y, c7, r1
					    rcp r0.y, r0.y
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    mad r0.yw, r2.xxzy, r0.y, c14.x
					    mul r1.x, r0.y, c14.y
					    mad r1.z, r0.w, -c14.y, c14.x
					    add_pp oC0.xy, -r0.xzzw, r1.xzzw
					    mov_pp oC0.zw, c14.xyzx
					
					// approximately 29 instruction slots used (1 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						mat4x4 _NonJitteredVP;
						mat4x4 _PreviousVP;
						vec4 unused_0_3[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2;
						vec4 _ZBufferParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[18];
						mat4x4 unity_CameraToWorld;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat9 = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    gl_FragDepth = u_xlat1.x;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * _PreviousVP[1].xyw;
					    u_xlat1.xyz = _PreviousVP[0].xyw * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PreviousVP[2].xyw * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PreviousVP[3].xyw * u_xlat0.www + u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.x = u_xlat1.x * 0.5;
					    u_xlat1.z = (-u_xlat1.y) * 0.5 + 1.0;
					    u_xlat2.xyz = u_xlat0.yyy * _NonJitteredVP[1].xyw;
					    u_xlat2.xyz = _NonJitteredVP[0].xyw * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = _NonJitteredVP[2].xyw * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = _NonJitteredVP[3].xyw * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat0.z = (-u_xlat0.y) * 0.5 + 1.0;
					    SV_Target0.xy = (-u_xlat1.xz) + u_xlat0.xz;
					    SV_Target0.zw = vec2(0.0, 1.0);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						mat4x4 _NonJitteredVP;
						mat4x4 _PreviousVP;
						vec4 unused_0_3[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2;
						vec4 _ZBufferParams;
						vec4 unused_1_4;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[18];
						mat4x4 unity_CameraToWorld;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
					    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat9 = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    gl_FragDepth = u_xlat1.x;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * _PreviousVP[1].xyw;
					    u_xlat1.xyz = _PreviousVP[0].xyw * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _PreviousVP[2].xyw * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = _PreviousVP[3].xyw * u_xlat0.www + u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
					    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
					    u_xlat1.x = u_xlat1.x * 0.5;
					    u_xlat1.z = (-u_xlat1.y) * 0.5 + 1.0;
					    u_xlat2.xyz = u_xlat0.yyy * _NonJitteredVP[1].xyw;
					    u_xlat2.xyz = _NonJitteredVP[0].xyw * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = _NonJitteredVP[2].xyw * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = _NonJitteredVP[3].xyw * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
					    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat0.z = (-u_xlat0.y) * 0.5 + 1.0;
					    SV_Target0.xy = (-u_xlat1.xz) + u_xlat0.xz;
					    SV_Target0.zw = vec2(0.0, 1.0);
					    return;
					}"
}
}
 }
}
Fallback Off
}