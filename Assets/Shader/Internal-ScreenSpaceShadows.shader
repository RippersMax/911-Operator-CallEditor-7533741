Shader "Hidden/Internal-ScreenSpaceShadows" {
Properties {
 _ShadowMapTexture ("", any) = "" { }
}
SubShader { 
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 1194
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_CameraInvProjection;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_CameraInvProjection c4       3
					//   _ProjectionParams         c7       1
					//
					
					    vs_3_0
					    def c8, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_texcoord o0.xy
					    dcl_texcoord1 o1.xyz
					    dcl_texcoord2 o2.xyz
					    dcl_texcoord3 o3.xyz
					    dcl_position o4
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    dp4 r1.x, c1, r0
					    dp4 r0.x, c0, r0
					    mul r0.y, r1.x, c7.x
					    mov o4.y, r1.x
					    mov r0.zw, c8.xyzx
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o3.x, c4, r0.xyww
					    dp4 o3.y, c5, r0.xyww
					    dp4 r0.z, c6, r0
					    dp4 r0.y, c6, r0.xyww
					    mov o4.x, r0.x
					    mov o3.z, -r0.y
					    mov o2.z, -r0.z
					    mov o0.xy, v1
					    mov o1.xyz, v2
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_CameraInvProjection;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_CameraInvProjection c4       3
					//   _ProjectionParams         c7       1
					//
					
					    vs_3_0
					    def c8, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_texcoord o0.xy
					    dcl_texcoord1 o1.xyz
					    dcl_texcoord2 o2.xyz
					    dcl_texcoord3 o3.xyz
					    dcl_position o4
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    dp4 r1.x, c1, r0
					    dp4 r0.x, c0, r0
					    mul r0.y, r1.x, c7.x
					    mov o4.y, r1.x
					    mov r0.zw, c8.xyzx
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o3.x, c4, r0.xyww
					    dp4 o3.y, c5, r0.xyww
					    dp4 r0.z, c6, r0
					    dp4 r0.y, c6, r0.xyww
					    mov o4.x, r0.x
					    mov o3.z, -r0.y
					    mov o2.z, -r0.z
					    mov o0.xy, v1
					    mov o1.xyz, v2
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_CameraInvProjection;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_CameraInvProjection c4       3
					//   _ProjectionParams         c7       1
					//
					
					    vs_3_0
					    def c8, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_texcoord o0.xy
					    dcl_texcoord1 o1.xyz
					    dcl_texcoord2 o2.xyz
					    dcl_texcoord3 o3.xyz
					    dcl_position o4
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    dp4 r1.x, c1, r0
					    dp4 r0.x, c0, r0
					    mul r0.y, r1.x, c7.x
					    mov o4.y, r1.x
					    mov r0.zw, c8.xyzx
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o3.x, c4, r0.xyww
					    dp4 o3.y, c5, r0.xyww
					    dp4 r0.z, c6, r0
					    dp4 r0.y, c6, r0.xyww
					    mov o4.x, r0.x
					    mov o3.z, -r0.y
					    mov o2.z, -r0.z
					    mov o0.xy, v1
					    mov o1.xyz, v2
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_CameraInvProjection;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_CameraInvProjection c4       3
					//   _ProjectionParams         c7       1
					//
					
					    vs_3_0
					    def c8, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_texcoord o0.xy
					    dcl_texcoord1 o1.xyz
					    dcl_texcoord2 o2.xyz
					    dcl_texcoord3 o3.xyz
					    dcl_position o4
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    dp4 r1.x, c1, r0
					    dp4 r0.x, c0, r0
					    mul r0.y, r1.x, c7.x
					    mov o4.y, r1.x
					    mov r0.zw, c8.xyzx
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o3.x, c4, r0.xyww
					    dp4 o3.y, c5, r0.xyww
					    dp4 r0.z, c6, r0
					    dp4 r0.y, c6, r0.xyww
					    mov o4.x, r0.x
					    mov o3.z, -r0.y
					    mov o2.z, -r0.z
					    mov o0.xy, v1
					    mov o1.xyz, v2
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _LightShadowData;
					//   float4 _LightSplitsFar;
					//   float4 _LightSplitsNear;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//   float4 unity_OrthoParams;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_WorldToShadow c0      15
					//   unity_CameraToWorld c15      4
					//   _ZBufferParams      c19      1
					//   unity_OrthoParams   c20      1
					//   _LightSplitsNear    c21      1
					//   _LightSplitsFar     c22      1
					//   _LightShadowData    c23      1
					//   _CameraDepthTexture s0       1
					//   _ShadowMapTexture   s1       1
					//
					
					    ps_3_0
					    def c24, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mad r0.y, c19.x, r0.x, c19.y
					    rcp r0.y, r0.y
					    lrp r1.x, c20.w, r0.x, r0.y
					    mov r2.xyz, v2
					    add r0.yzw, -r2.xxyz, v3.xxyz
					    mad r0.xyz, r0.x, r0.yzww, v2
					    mad r0.xyz, v1, -r1.x, r0
					    mul r1.xyz, r1.x, v1
					    mad r0.xyz, c20.w, r0, r1
					    add r1, r0.z, -c22
					    cmp r1, r1, c24.y, c24.x
					    add r2, r0.z, -c21
					    cmp r1, r2, r1, c24.y
					    mov r0.w, c24.x
					    dp4 r2.x, c15, r0
					    dp4 r2.y, c16, r0
					    dp4 r2.z, c17, r0
					    dp4 r2.w, c18, r0
					    mad_sat r0.x, r0.z, c23.z, c23.w
					    dp4 r3.x, c4, r2
					    dp4 r3.y, c5, r2
					    dp4 r3.z, c6, r2
					    mul r0.yzw, r1.y, r3.xxyz
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    mad r0.yzw, r3.xxyz, r1.x, r0
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r0.yzw, r3.xxyz, r1.z, r0
					    dp4 r1.x, c12, r2
					    dp4 r1.y, c13, r2
					    dp4 r1.z, c14, r2
					    mad r1.xyz, r1, r1.w, r0.yzww
					    mov r1.w, c24.x
					    texldp_pp r1, r1, s1
					    mov r2.x, c24.x
					    lrp_pp r0.y, r1.x, r2.x, c23.x
					    add_pp oC0, r0.x, r0.y
					
					// approximately 41 instruction slots used (2 texture, 39 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[6];
						vec4 _LightSplitsNear;
						vec4 _LightSplitsFar;
						mat4x4 unity_WorldToShadow;
						vec4 unused_2_4[12];
						vec4 _LightShadowData;
						vec4 unused_2_6;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					bvec4 u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat4.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat8 = (-u_xlat4.x) + u_xlat0.x;
					    u_xlat4.x = unity_OrthoParams.w * u_xlat8 + u_xlat4.x;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
					    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
					    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
					;
					    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
					    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
					;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat2 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0.x = u_xlat0.z * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + unity_CameraToWorld[3];
					    u_xlat4.xyz = u_xlat2.yyy * unused_2_4[1].xyz;
					    u_xlat4.xyz = unused_2_4[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unused_2_4[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unused_2_4[3].xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = unity_WorldToShadow[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[3].xyz * u_xlat2.www + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unused_2_4[5].xyz;
					    u_xlat3.xyz = unused_2_4[4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unused_2_4[6].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unused_2_4[7].xyz * u_xlat2.www + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * unused_2_4[9].xyz;
					    u_xlat1.xyz = unused_2_4[8].xyz * u_xlat2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unused_2_4[10].xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unused_2_4[11].xyz * u_xlat2.www + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[6];
						vec4 _LightSplitsNear;
						vec4 _LightSplitsFar;
						mat4x4 unity_WorldToShadow;
						vec4 unused_2_4[12];
						vec4 _LightShadowData;
						vec4 unused_2_6;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					bvec4 u_xlatb2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat4.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat8 = (-u_xlat4.x) + u_xlat0.x;
					    u_xlat4.x = unity_OrthoParams.w * u_xlat8 + u_xlat4.x;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
					    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
					    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
					;
					    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
					    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
					;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat2 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0.x = u_xlat0.z * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + unity_CameraToWorld[3];
					    u_xlat4.xyz = u_xlat2.yyy * unused_2_4[1].xyz;
					    u_xlat4.xyz = unused_2_4[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unused_2_4[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unused_2_4[3].xyz * u_xlat2.www + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = unity_WorldToShadow[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[3].xyz * u_xlat2.www + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unused_2_4[5].xyz;
					    u_xlat3.xyz = unused_2_4[4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unused_2_4[6].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unused_2_4[7].xyz * u_xlat2.www + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * unused_2_4[9].xyz;
					    u_xlat1.xyz = unused_2_4[8].xyz * u_xlat2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unused_2_4[10].xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unused_2_4[11].xyz * u_xlat2.www + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _LightShadowData;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//   float4 unity_OrthoParams;
					//   float4 unity_ShadowFadeCenterAndType;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0      15
					//   unity_CameraToWorld           c15      4
					//   unity_ShadowSplitSpheres      c19      4
					//   _ZBufferParams                c23      1
					//   unity_OrthoParams             c24      1
					//   unity_ShadowSplitSqRadii      c25      1
					//   _LightShadowData              c26      1
					//   unity_ShadowFadeCenterAndType c27      1
					//   _CameraDepthTexture           s0       1
					//   _ShadowMapTexture             s1       1
					//
					
					    ps_3_0
					    def c28, 1, 0, -0, -1
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mad r0.y, c23.x, r0.x, c23.y
					    rcp r0.y, r0.y
					    lrp r1.x, c24.w, r0.x, r0.y
					    mov r2.xyz, v2
					    add r0.yzw, -r2.xxyz, v3.xxyz
					    mad r0.xyz, r0.x, r0.yzww, v2
					    mad r0.xyz, v1, -r1.x, r0
					    mul r1.xyz, r1.x, v1
					    mad r0.xyz, c24.w, r0, r1
					    mov r0.w, c28.x
					    dp4 r1.x, c15, r0
					    dp4 r1.y, c16, r0
					    dp4 r1.z, c17, r0
					    dp4 r1.w, c18, r0
					    add r0.xyz, r1, -c19
					    dp3 r0.x, r0, r0
					    add r2.xyz, r1, -c20
					    dp3 r0.y, r2, r2
					    add r2.xyz, r1, -c21
					    dp3 r0.z, r2, r2
					    add r2.xyz, r1, -c22
					    dp3 r0.w, r2, r2
					    add r0, r0, -c25
					    cmp r2.xyz, r0, c28.z, c28.w
					    cmp r0, r0, c28.y, c28.x
					    add_pp r0.yzw, r2.xxyz, r0
					    max_pp r2.xyz, r0.yzww, c28.y
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    mul r0.yzw, r2.x, r3.xxyz
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    mad r0.xyz, r3, r0.x, r0.yzww
					    dp4 r3.x, c8, r1
					    dp4 r3.y, c9, r1
					    dp4 r3.z, c10, r1
					    mad r0.xyz, r3, r2.y, r0
					    dp4 r3.x, c12, r1
					    dp4 r3.y, c13, r1
					    dp4 r3.z, c14, r1
					    add r1.xyz, r1, -c27
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mad_sat_pp r0.w, r0.w, c26.z, c26.w
					    mad r1.xyz, r3, r2.z, r0
					    mov r1.w, c28.x
					    texldp_pp r1, r1, s1
					    mov r0.x, c28.x
					    lrp_pp r2.x, r1.x, r0.x, c26.x
					    add_pp oC0, r0.w, r2.x
					
					// approximately 54 instruction slots used (2 texture, 52 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres;
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow;
						vec4 unused_2_5[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat4.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat8 = (-u_xlat4.x) + u_xlat0.x;
					    u_xlat4.x = unity_OrthoParams.w * u_xlat8 + u_xlat4.x;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_2_1[0].xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_2_1[1].xyz);
					    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_2_1[2].xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
					    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
					    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
					    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
					    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
					    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
					;
					    u_xlat5.xyz = u_xlat2.xyz + u_xlat1.yzw;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.yyy * unused_2_5[1].xyz;
					    u_xlat2.xyz = unused_2_5[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unused_2_5[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unused_2_5[3].xyz * u_xlat0.www + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unused_2_5[5].xyz;
					    u_xlat3.xyz = unused_2_5[4].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unused_2_5[6].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unused_2_5[7].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat5.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.yyy * unused_2_5[9].xyz;
					    u_xlat2.xyz = unused_2_5[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unused_2_5[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unused_2_5[11].xyz * u_xlat0.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat5.zzz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres;
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow;
						vec4 unused_2_5[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat4.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat8 = (-u_xlat4.x) + u_xlat0.x;
					    u_xlat4.x = unity_OrthoParams.w * u_xlat8 + u_xlat4.x;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_2_1[0].xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_2_1[1].xyz);
					    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_2_1[2].xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
					    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
					    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
					    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
					    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
					    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
					;
					    u_xlat5.xyz = u_xlat2.xyz + u_xlat1.yzw;
					    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.yyy * unused_2_5[1].xyz;
					    u_xlat2.xyz = unused_2_5[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unused_2_5[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unused_2_5[3].xyz * u_xlat0.www + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unused_2_5[5].xyz;
					    u_xlat3.xyz = unused_2_5[4].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unused_2_5[6].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unused_2_5[7].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat5.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.yyy * unused_2_5[9].xyz;
					    u_xlat2.xyz = unused_2_5[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unused_2_5[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unused_2_5[11].xyz * u_xlat0.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat5.zzz + u_xlat1.xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat4.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat4.x = u_xlat4.x * u_xlat8 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + u_xlat4.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _LightShadowData;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//   float4 unity_OrthoParams;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_CameraToWorld c0       4
					//   unity_WorldToShadow c4       3
					//   _ZBufferParams      c7       1
					//   unity_OrthoParams   c8       1
					//   _LightShadowData    c9       1
					//   _CameraDepthTexture s0       1
					//   _ShadowMapTexture   s1       1
					//
					
					    ps_3_0
					    def c10, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.w, c10.x
					    texld r1, v0, s0
					    mad r1.y, c7.x, r1.x, c7.y
					    rcp r1.y, r1.y
					    lrp r2.x, c8.w, r1.x, r1.y
					    mov r3.xyz, v2
					    add r1.yzw, -r3.xxyz, v3.xxyz
					    mad r1.xyz, r1.x, r1.yzww, v2
					    mad r1.xyz, v1, -r2.x, r1
					    mul r2.xyz, r2.x, v1
					    mad r1.xyz, c8.w, r1, r2
					    mov r1.w, c10.x
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp4 r2.w, c3, r1
					    mad_sat r1.x, r1.z, c9.z, c9.w
					    dp4 r0.x, c4, r2
					    dp4 r0.y, c5, r2
					    dp4 r0.z, c6, r2
					    texldp_pp r0, r0, s1
					    mov r2.x, c9.x
					    add_pp r0.y, -r2.x, c10.x
					    mad_pp r0.x, r0.x, r0.y, c9.x
					    add_pp oC0, r1.x, r0.x
					
					// approximately 25 instruction slots used (2 texture, 23 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_2_2[12];
						vec4 _LightShadowData;
						vec4 unused_2_4;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat2.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat4 = (-u_xlat2.x) + u_xlat0.x;
					    u_xlat2.x = unity_OrthoParams.w * u_xlat4 + u_xlat2.x;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat2.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.z * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = u_xlat1 + unity_CameraToWorld[3];
					    u_xlat2.xyz = u_xlat1.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = unity_WorldToShadow[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToShadow[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToShadow[3].xyz * u_xlat1.www + u_xlat2.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat4 = (-_LightShadowData.x) + 1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat4 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + u_xlat2.xxxx;
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_2_2[12];
						vec4 _LightShadowData;
						vec4 unused_2_4;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat2.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat4 = (-u_xlat2.x) + u_xlat0.x;
					    u_xlat2.x = unity_OrthoParams.w * u_xlat4 + u_xlat2.x;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat2.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.z * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = u_xlat1 + unity_CameraToWorld[3];
					    u_xlat2.xyz = u_xlat1.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = unity_WorldToShadow[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToShadow[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToShadow[3].xyz * u_xlat1.www + u_xlat2.xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat4 = (-_LightShadowData.x) + 1.0;
					    u_xlat2.x = u_xlat2.x * u_xlat4 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + u_xlat2.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _LightShadowData;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//   float4 unity_OrthoParams;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_CameraToWorld           c0       4
					//   unity_WorldToShadow           c4       3
					//   _ZBufferParams                c7       1
					//   unity_OrthoParams             c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _CameraDepthTexture           s0       1
					//   _ShadowMapTexture             s1       1
					//
					
					    ps_3_0
					    def c11, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.w, c11.x
					    texld r1, v0, s0
					    mad r1.y, c7.x, r1.x, c7.y
					    rcp r1.y, r1.y
					    lrp r2.x, c8.w, r1.x, r1.y
					    mov r3.xyz, v2
					    add r1.yzw, -r3.xxyz, v3.xxyz
					    mad r1.xyz, r1.x, r1.yzww, v2
					    mad r1.xyz, v1, -r2.x, r1
					    mul r2.xyz, r2.x, v1
					    mad r1.xyz, c8.w, r1, r2
					    mov r1.w, c11.x
					    dp4 r2.w, c3, r1
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp4 r0.x, c4, r2
					    dp4 r0.y, c5, r2
					    dp4 r0.z, c6, r2
					    add r1.xyz, r2, -c10
					    dp3 r1.x, r1, r1
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mad_sat_pp r1.x, r1.x, c9.z, c9.w
					    texldp_pp r0, r0, s1
					    mov r2.x, c9.x
					    add_pp r0.y, -r2.x, c11.x
					    mad_pp r0.x, r0.x, r0.y, c9.x
					    add_pp oC0, r1.x, r0.x
					
					// approximately 29 instruction slots used (2 texture, 27 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_2_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat2 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat2 = float(1.0) / u_xlat2;
					    u_xlat4 = (-u_xlat2) + u_xlat0.x;
					    u_xlat2 = unity_OrthoParams.w * u_xlat4 + u_xlat2;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + u_xlat0.xzw;
					    u_xlat1.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat4 = (-_LightShadowData.x) + 1.0;
					    u_xlat2 = u_xlat2 * u_xlat4 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + vec4(u_xlat2);
					    return;
					}"
}
SubProgram "d3d11_9x " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_2_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat2 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat2 = float(1.0) / u_xlat2;
					    u_xlat4 = (-u_xlat2) + u_xlat0.x;
					    u_xlat2 = unity_OrthoParams.w * u_xlat4 + u_xlat2;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * vec3(u_xlat2) + u_xlat0.xzw;
					    u_xlat1.xyz = vec3(u_xlat2) * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat2 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat4 = (-_LightShadowData.x) + 1.0;
					    u_xlat2 = u_xlat2 * u_xlat4 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + vec4(u_xlat2);
					    return;
					}"
}
}
 }
}
SubShader { 
 Tags { "ShadowmapFilter"="PCF_5x5" }
 Pass {
  Tags { "ShadowmapFilter"="PCF_5x5" }
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 88306
Program "vp" {
SubProgram "d3d9 " {
"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_CameraInvProjection;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_CameraInvProjection c4       3
					//   _ProjectionParams         c7       1
					//
					
					    vs_3_0
					    def c8, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_texcoord o0.xy
					    dcl_texcoord1 o1.xyz
					    dcl_texcoord2 o2.xyz
					    dcl_texcoord3 o3.xyz
					    dcl_position o4
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    dp4 r1.x, c1, r0
					    dp4 r0.x, c0, r0
					    mul r0.y, r1.x, c7.x
					    mov o4.y, r1.x
					    mov r0.zw, c8.xyzx
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o3.x, c4, r0.xyww
					    dp4 o3.y, c5, r0.xyww
					    dp4 r0.z, c6, r0
					    dp4 r0.y, c6, r0.xyww
					    mov o4.x, r0.x
					    mov o3.z, -r0.y
					    mov o2.z, -r0.z
					    mov o0.xy, v1
					    mov o1.xyz, v2
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_CameraInvProjection;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_CameraInvProjection c4       3
					//   _ProjectionParams         c7       1
					//
					
					    vs_3_0
					    def c8, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_texcoord o0.xy
					    dcl_texcoord1 o1.xyz
					    dcl_texcoord2 o2.xyz
					    dcl_texcoord3 o3.xyz
					    dcl_position o4
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    dp4 r1.x, c1, r0
					    dp4 r0.x, c0, r0
					    mul r0.y, r1.x, c7.x
					    mov o4.y, r1.x
					    mov r0.zw, c8.xyzx
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o3.x, c4, r0.xyww
					    dp4 o3.y, c5, r0.xyww
					    dp4 r0.z, c6, r0
					    dp4 r0.y, c6, r0.xyww
					    mov o4.x, r0.x
					    mov o3.z, -r0.y
					    mov o2.z, -r0.z
					    mov o0.xy, v1
					    mov o1.xyz, v2
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_CameraInvProjection;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_CameraInvProjection c4       3
					//   _ProjectionParams         c7       1
					//
					
					    vs_3_0
					    def c8, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_texcoord o0.xy
					    dcl_texcoord1 o1.xyz
					    dcl_texcoord2 o2.xyz
					    dcl_texcoord3 o3.xyz
					    dcl_position o4
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    dp4 r1.x, c1, r0
					    dp4 r0.x, c0, r0
					    mul r0.y, r1.x, c7.x
					    mov o4.y, r1.x
					    mov r0.zw, c8.xyzx
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o3.x, c4, r0.xyww
					    dp4 o3.y, c5, r0.xyww
					    dp4 r0.z, c6, r0
					    dp4 r0.y, c6, r0.xyww
					    mov o4.x, r0.x
					    mov o3.z, -r0.y
					    mov o2.z, -r0.z
					    mov o0.xy, v1
					    mov o1.xyz, v2
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_CameraInvProjection;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   unity_CameraInvProjection c4       3
					//   _ProjectionParams         c7       1
					//
					
					    vs_3_0
					    def c8, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_texcoord o0.xy
					    dcl_texcoord1 o1.xyz
					    dcl_texcoord2 o2.xyz
					    dcl_texcoord3 o3.xyz
					    dcl_position o4
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 o4.z, c2, r0
					    dp4 o4.w, c3, r0
					    dp4 r1.x, c1, r0
					    dp4 r0.x, c0, r0
					    mul r0.y, r1.x, c7.x
					    mov o4.y, r1.x
					    mov r0.zw, c8.xyzx
					    dp4 o2.x, c4, r0
					    dp4 o2.y, c5, r0
					    dp4 o3.x, c4, r0.xyww
					    dp4 o3.y, c5, r0.xyww
					    dp4 r0.z, c6, r0
					    dp4 r0.y, c6, r0.xyww
					    mov o4.x, r0.x
					    mov o3.z, -r0.y
					    mov o2.z, -r0.z
					    mov o0.xy, v1
					    mov o1.xyz, v2
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_1_0[10];
						mat4x4 unity_CameraInvProjection;
						vec4 unused_1_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xyz = u_xlat1.xxx * unity_CameraInvProjection[1].xyz;
					    u_xlat1.xyz = unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    gl_Position = u_xlat0;
					    u_xlat0.xyz = u_xlat1.xyz + (-unity_CameraInvProjection[2].xyz);
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[2].xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + unity_CameraInvProjection[3].xyz;
					    u_xlat0.w = (-u_xlat0.z);
					    vs_TEXCOORD2.xyz = u_xlat0.xyw;
					    u_xlat1.w = (-u_xlat1.z);
					    vs_TEXCOORD3.xyz = u_xlat1.xyw;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _LightShadowData;
					//   float4 _LightSplitsFar;
					//   float4 _LightSplitsNear;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowMapTexture_TexelSize;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//   float4 unity_OrthoParams;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   unity_WorldToShadow         c0      15
					//   unity_CameraToWorld         c15      4
					//   _ZBufferParams              c19      1
					//   unity_OrthoParams           c20      1
					//   _LightSplitsNear            c21      1
					//   _LightSplitsFar             c22      1
					//   _LightShadowData            c23      1
					//   _ShadowMapTexture_TexelSize c24      1
					//   _CameraDepthTexture         s0       1
					//   _ShadowMapTexture           s1       1
					//
					
					    ps_3_0
					    def c25, 1, 0, 0.5, -0.5
					    def c26, 3, 4, 1, 2
					    def c27, 1, 0, 0.142857149, -1
					    def c28, 4, 7, 1, 49
					    def c29, 0.0069444445, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mad r0.y, c19.x, r0.x, c19.y
					    rcp r0.y, r0.y
					    lrp r1.x, c20.w, r0.x, r0.y
					    mov r2.xyz, v2
					    add r0.yzw, -r2.xxyz, v3.xxyz
					    mad r0.xyz, r0.x, r0.yzww, v2
					    mad r0.xyz, v1, -r1.x, r0
					    mul r1.xyz, r1.x, v1
					    mad r0.xyz, c20.w, r0, r1
					    add r1, r0.z, -c22
					    cmp r1, r1, c25.y, c25.x
					    add r2, r0.z, -c21
					    cmp r1, r2, r1, c25.y
					    mov r0.w, c25.x
					    dp4 r2.x, c15, r0
					    dp4 r2.y, c16, r0
					    dp4 r2.z, c17, r0
					    dp4 r2.w, c18, r0
					    mad_sat r0.x, r0.z, c23.z, c23.w
					    dp4 r3.x, c4, r2
					    dp4 r3.y, c5, r2
					    dp4 r3.z, c6, r2
					    mul r0.yzw, r1.y, r3.xxyz
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    mad r0.yzw, r3.xxyz, r1.x, r0
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r0.yzw, r3.xxyz, r1.z, r0
					    dp4 r1.x, c12, r2
					    dp4 r1.y, c13, r2
					    dp4 r1.z, c14, r2
					    mad r0.yzw, r1.xxyz, r1.w, r0
					    mad r1.zw, r0.w, c25.xyxy, c25.xyyx
					    mov r2, c24
					    mad r0.yz, r0, r2.xzww, c25.z
					    frc r2.zw, r0.xyyz
					    add r0.yz, r0, -r2.xzww
					    add r0.yz, r0, c25.w
					    mad r3.xy, r2.zwzw, c26.x, c26.z
					    rcp r0.w, r3.x
					    mad r4.w, r2.z, r0.w, c26.w
					    add r3.xz, r2.zyww, c26.x
					    mul r4.yz, r3.xzxw, c24.xyxw
					    mad r3.xz, r2.zyww, -c26.w, c26.x
					    mad r5.xy, r2.zwzw, -c26.x, c26.y
					    rcp r0.w, r5.x
					    mad r4.x, r3.x, r0.w, -c26.w
					    mad r5.xzw, r2.x, c27.xyyx, c27.yyzy
					    mul r6.xyz, r4.zxww, r5.zxww
					    rcp r0.w, r3.y
					    mad r4.z, r2.w, r0.w, c26.w
					    mul r0.w, r2.z, c26.x
					    mov r7.xyw, c27
					    mad r5.xzw, r0.w, r7.wyyx, c28.xyyz
					    rcp r0.w, r5.y
					    mul_pp r7.xyz, r5.y, r5.xzww
					    mad r4.x, r3.z, r0.w, -c26.w
					    mad r2.xyz, r2.yxyw, c27.xyxw, c27.yzyw
					    mul r2.xyz, r2, r4
					    mov r6.w, r2.x
					    mad r1.xy, r0.yzzw, c24, r6.ywzw
					    texldp r4, r1, s1
					    mad r1.xy, r0.yzzw, c24, r6.xwzw
					    mad r8.xy, r0.yzzw, c24, r6.zwzw
					    texldp r9, r1, s1
					    mov r8.zw, r1
					    mul r0.w, r7.y, r9.x
					    mad_pp r0.w, r7.x, r4.x, r0.w
					    texldp r1, r8, s1
					    mad_pp r0.w, r7.z, r1.x, r0.w
					    mul_pp r1.xy, r5.xwzw, c28.y
					    mul_pp r3.xyz, r3.y, r5.xzww
					    mov r2.w, r6.y
					    mad r8.xy, r0.yzzw, c24, r2.wyzw
					    mad r4.xy, r0.yzzw, c24, r2.wzzw
					    mov r6.yw, r2.xyzz
					    texldp r2, r8, s1
					    mad_pp r0.w, r1.x, r2.x, r0.w
					    mad r8.xy, r0.yzzw, c24, r6
					    texldp r2, r8, s1
					    mad_pp r0.w, r2.x, c28.w, r0.w
					    mad r8.xy, r0.yzzw, c24, r6.zyzw
					    texldp r2, r8, s1
					    mov r4.zw, r8
					    mad_pp r0.w, r1.y, r2.x, r0.w
					    texldp r1, r4, s1
					    mad_pp r0.w, r3.x, r1.x, r0.w
					    mad r4.xy, r0.yzzw, c24, r6.xwzw
					    mad r1.xy, r0.yzzw, c24, r6.zwzw
					    texldp r2, r4, s1
					    mov r1.zw, r4
					    texldp r1, r1, s1
					    mad_pp r0.y, r3.y, r2.x, r0.w
					    mad_pp r0.y, r3.z, r1.x, r0.y
					    mul_pp r0.y, r0.y, c29.x
					    mov r1.x, c25.x
					    lrp_pp r2.x, r0.y, r1.x, c23.x
					    add_pp oC0, r0.x, r2.x
					
					// approximately 102 instruction slots used (10 texture, 92 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ShadowMapTexture_TexelSize;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[6];
						vec4 _LightSplitsNear;
						vec4 _LightSplitsFar;
						mat4x4 unity_WorldToShadow;
						vec4 unused_3_4[12];
						vec4 _LightShadowData;
						vec4 unused_3_6;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					bvec4 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat16;
					vec2 u_xlat17;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat8.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat16 = (-u_xlat8.x) + u_xlat0.x;
					    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
					    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
					    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
					;
					    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
					    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
					;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat2 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat2 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat2 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0.x = u_xlat0.z * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + unity_CameraToWorld[3];
					    u_xlat8.xyz = u_xlat2.yyy * unused_3_4[1].xyz;
					    u_xlat8.xyz = unused_3_4[0].xyz * u_xlat2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = unused_3_4[2].xyz * u_xlat2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = unused_3_4[3].xyz * u_xlat2.www + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat1.yyy * u_xlat8.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = unity_WorldToShadow[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[3].xyz * u_xlat2.www + u_xlat3.xyz;
					    u_xlat8.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat8.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unused_3_4[5].xyz;
					    u_xlat3.xyz = unused_3_4[4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unused_3_4[6].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unused_3_4[7].xyz * u_xlat2.www + u_xlat3.xyz;
					    u_xlat8.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * unused_3_4[9].xyz;
					    u_xlat1.xyz = unused_3_4[8].xyz * u_xlat2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unused_3_4[10].xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unused_3_4[11].xyz * u_xlat2.www + u_xlat1.xyz;
					    u_xlat8.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat8.xyz;
					    u_xlat8.xy = u_xlat8.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat8.xy);
					    u_xlat8.xy = fract(u_xlat8.xy);
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat17.xy = (-u_xlat8.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
					    u_xlat2.xy = (-u_xlat8.xy) * vec2(3.0, 3.0) + vec2(4.0, 4.0);
					    u_xlat17.xy = u_xlat17.xy / u_xlat2.xy;
					    u_xlat3.xy = u_xlat17.xy + vec2(-2.0, -2.0);
					    u_xlat4.z = u_xlat3.y;
					    u_xlat17.xy = u_xlat8.xy * vec2(3.0, 3.0) + vec2(1.0, 1.0);
					    u_xlat2.xz = u_xlat8.xy / u_xlat17.xy;
					    u_xlat4.xw = u_xlat2.xz + vec2(2.0, 2.0);
					    u_xlat3.w = u_xlat4.x;
					    u_xlat2.xz = u_xlat8.xy + vec2(3.0, 3.0);
					    u_xlat8.x = u_xlat8.x * 3.0;
					    u_xlat5.xz = u_xlat8.xx * vec2(-1.0, 1.0) + vec2(4.0, 1.0);
					    u_xlat4.xy = u_xlat2.xz * _ShadowMapTexture_TexelSize.xy;
					    u_xlat6.xz = _ShadowMapTexture_TexelSize.yy;
					    u_xlat6.y = 0.142857149;
					    u_xlat6.xyz = u_xlat4.zyw * u_xlat6.xyz;
					    u_xlat3.z = u_xlat4.x;
					    u_xlat4.w = u_xlat6.x;
					    u_xlat7.xz = _ShadowMapTexture_TexelSize.xx;
					    u_xlat7.y = 0.142857149;
					    u_xlat4.xyz = u_xlat3.zxw * u_xlat7.yxz;
					    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat4.ywxw;
					    u_xlat8.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat8.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat3.zw,u_xlat8.z);
					    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat5.y = 7.0;
					    u_xlat2.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat17.yyy * u_xlat5.xyz;
					    u_xlat5.xy = u_xlat5.xz * vec2(7.0, 7.0);
					    u_xlat17.x = u_xlat17.x * u_xlat2.y;
					    u_xlat16 = u_xlat2.x * u_xlat16 + u_xlat17.x;
					    u_xlat8.x = u_xlat2.z * u_xlat8.x + u_xlat16;
					    u_xlat6.w = u_xlat4.y;
					    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.wywz;
					    u_xlat4.yw = u_xlat6.yz;
					    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat8.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat8.z);
					    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
					    u_xlat8.x = u_xlat5.x * u_xlat16 + u_xlat8.x;
					    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat4.xyzy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat8.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat8.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
					    u_xlat8.x = u_xlat16 * 49.0 + u_xlat8.x;
					    u_xlat8.x = u_xlat5.y * u_xlat1.x + u_xlat8.x;
					    u_xlat8.x = u_xlat3.x * u_xlat17.x + u_xlat8.x;
					    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat8.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat8.z);
					    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
					    u_xlat8.x = u_xlat3.y * u_xlat16 + u_xlat8.x;
					    u_xlat8.x = u_xlat3.z * u_xlat24 + u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * 0.0069444445;
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat16 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + u_xlat8.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _LightShadowData;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowMapTexture_TexelSize;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//   float4 unity_OrthoParams;
					//   float4 unity_ShadowFadeCenterAndType;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_WorldToShadow           c0      15
					//   unity_CameraToWorld           c15      4
					//   unity_ShadowSplitSpheres      c19      4
					//   _ZBufferParams                c23      1
					//   unity_OrthoParams             c24      1
					//   unity_ShadowSplitSqRadii      c25      1
					//   _LightShadowData              c26      1
					//   unity_ShadowFadeCenterAndType c27      1
					//   _ShadowMapTexture_TexelSize   c28      1
					//   _CameraDepthTexture           s0       1
					//   _ShadowMapTexture             s1       1
					//
					
					    ps_3_0
					    def c29, 0.5, -0.5, 3, 4
					    def c30, 4, 7, 1, 49
					    def c31, 3, 1, 2, -2
					    def c32, 1, 0, 0.142857149, 7
					    def c33, 0.0069444445, 0, 0, 0
					    def c34, 1, 0, -0, -1
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    mad r0.y, c23.x, r0.x, c23.y
					    rcp r0.y, r0.y
					    lrp r1.x, c24.w, r0.x, r0.y
					    mov r2.xyz, v2
					    add r0.yzw, -r2.xxyz, v3.xxyz
					    mad r0.xyz, r0.x, r0.yzww, v2
					    mad r0.xyz, v1, -r1.x, r0
					    mul r1.xyz, r1.x, v1
					    mad r0.xyz, c24.w, r0, r1
					    mov r0.w, c34.x
					    dp4 r1.x, c15, r0
					    dp4 r1.y, c16, r0
					    dp4 r1.z, c17, r0
					    dp4 r1.w, c18, r0
					    add r0.xyz, r1, -c19
					    dp3 r0.x, r0, r0
					    add r2.xyz, r1, -c20
					    dp3 r0.y, r2, r2
					    add r2.xyz, r1, -c21
					    dp3 r0.z, r2, r2
					    add r2.xyz, r1, -c22
					    dp3 r0.w, r2, r2
					    add r0, r0, -c25
					    cmp r2.xyz, r0, c34.z, c34.w
					    cmp r0, r0, c34.y, c34.x
					    add_pp r0.yzw, r2.xxyz, r0
					    max_pp r2.xyz, r0.yzww, c34.y
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    mul r0.yzw, r2.x, r3.xxyz
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    mad r0.xyz, r3, r0.x, r0.yzww
					    dp4 r3.x, c8, r1
					    dp4 r3.y, c9, r1
					    dp4 r3.z, c10, r1
					    mad r0.xyz, r3, r2.y, r0
					    dp4 r3.x, c12, r1
					    dp4 r3.y, c13, r1
					    dp4 r3.z, c14, r1
					    add r1.xyz, r1, -c27
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mad_sat_pp r0.w, r0.w, c26.z, c26.w
					    mad r0.xyz, r3, r2.z, r0
					    mad r1.zw, r0.z, c34.xyxy, c34.xyyx
					    mov r2, c28
					    mad r0.xy, r0, r2.zwzw, c29.x
					    frc r2.zw, r0.xyxy
					    add r0.xy, r0, -r2.zwzw
					    add r0.xy, r0, c29.y
					    mad r3.xy, r2.zwzw, c31.x, c31.y
					    rcp r0.z, r3.x
					    mad r4.w, r2.z, r0.z, c31.z
					    add r3.xz, r2.zyww, c29.z
					    mul r4.yz, r3.xzxw, c28.xyxw
					    mad r3.xz, r2.zyww, -c31.z, c31.x
					    mad r5.xy, r2.zwzw, -c29.z, c29.w
					    rcp r0.z, r5.x
					    mad r4.x, r3.x, r0.z, c31.w
					    mad r5.xzw, r2.x, c32.xyyx, c32.yyzy
					    mul r6.xyz, r4.zxww, r5.zxww
					    rcp r0.z, r3.y
					    mad r4.z, r2.w, r0.z, c31.z
					    mul r0.z, r2.z, c29.z
					    mov r7.xyw, c34
					    mad r5.xzw, r0.z, r7.wyyx, c30.xyyz
					    rcp r0.z, r5.y
					    mul_pp r7.yzw, r5.y, r5.xxzw
					    mad r4.x, r3.z, r0.z, c31.w
					    mad r2.xyz, r2.yxyw, c32.xyxw, c32.yzyw
					    mul r2.xyz, r2, r4
					    mov r6.w, r2.x
					    mad r1.xy, r0, c28, r6.ywzw
					    texldp r4, r1, s1
					    mad r1.xy, r0, c28, r6.xwzw
					    mad r8.xy, r0, c28, r6.zwzw
					    texldp r9, r1, s1
					    mov r8.zw, r1
					    mul r0.z, r7.z, r9.x
					    mad_pp r0.z, r7.y, r4.x, r0.z
					    texldp r1, r8, s1
					    mad_pp r0.z, r7.w, r1.x, r0.z
					    mul_pp r1.xy, r5.xwzw, c32.w
					    mul_pp r3.xyz, r3.y, r5.xzww
					    mov r2.w, r6.y
					    mad r8.xy, r0, c28, r2.wyzw
					    mad r4.xy, r0, c28, r2.wzzw
					    mov r6.yw, r2.xyzz
					    texldp r2, r8, s1
					    mad_pp r0.z, r1.x, r2.x, r0.z
					    mad r8.xy, r0, c28, r6
					    texldp r2, r8, s1
					    mad_pp r0.z, r2.x, c30.w, r0.z
					    mad r8.xy, r0, c28, r6.zyzw
					    texldp r2, r8, s1
					    mov r4.zw, r8
					    mad_pp r0.z, r1.y, r2.x, r0.z
					    texldp r1, r4, s1
					    mad_pp r0.z, r3.x, r1.x, r0.z
					    mad r4.xy, r0, c28, r6.xwzw
					    mad r1.xy, r0, c28, r6.zwzw
					    texldp r2, r4, s1
					    mov r1.zw, r4
					    texldp r1, r1, s1
					    mad_pp r0.x, r3.y, r2.x, r0.z
					    mad_pp r0.x, r3.z, r1.x, r0.x
					    mul_pp r0.x, r0.x, c33.x
					    lrp_pp r1.x, r0.x, r7.x, c26.x
					    add_pp oC0, r0.w, r1.x
					
					// approximately 114 instruction slots used (10 texture, 104 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ShadowMapTexture_TexelSize;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres;
						vec4 unused_3_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_3_3[3];
						mat4x4 unity_WorldToShadow;
						vec4 unused_3_5[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					float u_xlat16;
					vec2 u_xlat17;
					float u_xlat24;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat8.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat16 = (-u_xlat8.x) + u_xlat0.x;
					    u_xlat8.x = unity_OrthoParams.w * u_xlat16 + u_xlat8.x;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
					    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat8.xxx + u_xlat0.xzw;
					    u_xlat1.xyz = u_xlat8.xxx * vs_TEXCOORD1.xyz;
					    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_CameraToWorld[1];
					    u_xlat1 = unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_CameraToWorld[3];
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres.xyz);
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_3_1[0].xyz);
					    u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_3_1[1].xyz);
					    u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat0.xyz + (-unused_3_1[2].xyz);
					    u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);
					    u_xlat2.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);
					    u_xlat2.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);
					    u_xlat2.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);
					    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
					    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
					    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
					    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
					;
					    u_xlat9.xyz = u_xlat2.xyz + u_xlat1.yzw;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = u_xlat0.yyy * unused_3_5[1].xyz;
					    u_xlat2.xyz = unused_3_5[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unused_3_5[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unused_3_5[3].xyz * u_xlat0.www + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat9.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat3.xyz = unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_WorldToShadow[3].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.yyy * unused_3_5[5].xyz;
					    u_xlat3.xyz = unused_3_5[4].xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unused_3_5[6].xyz * u_xlat0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unused_3_5[7].xyz * u_xlat0.www + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat9.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.yyy * unused_3_5[9].xyz;
					    u_xlat2.xyz = unused_3_5[8].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unused_3_5[10].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unused_3_5[11].xyz * u_xlat0.www + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.xyz = u_xlat2.xyz * u_xlat9.zzz + u_xlat1.xyz;
					    u_xlat8.xy = u_xlat8.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat8.xy);
					    u_xlat8.xy = fract(u_xlat8.xy);
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat17.xy = (-u_xlat8.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
					    u_xlat2.xy = (-u_xlat8.xy) * vec2(3.0, 3.0) + vec2(4.0, 4.0);
					    u_xlat17.xy = u_xlat17.xy / u_xlat2.xy;
					    u_xlat3.xy = u_xlat17.xy + vec2(-2.0, -2.0);
					    u_xlat4.z = u_xlat3.y;
					    u_xlat17.xy = u_xlat8.xy * vec2(3.0, 3.0) + vec2(1.0, 1.0);
					    u_xlat2.xz = u_xlat8.xy / u_xlat17.xy;
					    u_xlat4.xw = u_xlat2.xz + vec2(2.0, 2.0);
					    u_xlat3.w = u_xlat4.x;
					    u_xlat2.xz = u_xlat8.xy + vec2(3.0, 3.0);
					    u_xlat8.x = u_xlat8.x * 3.0;
					    u_xlat5.xz = u_xlat8.xx * vec2(-1.0, 1.0) + vec2(4.0, 1.0);
					    u_xlat4.xy = u_xlat2.xz * _ShadowMapTexture_TexelSize.xy;
					    u_xlat6.xz = _ShadowMapTexture_TexelSize.yy;
					    u_xlat6.y = 0.142857149;
					    u_xlat6.xyz = u_xlat4.zyw * u_xlat6.xyz;
					    u_xlat3.z = u_xlat4.x;
					    u_xlat4.w = u_xlat6.x;
					    u_xlat7.xz = _ShadowMapTexture_TexelSize.xx;
					    u_xlat7.y = 0.142857149;
					    u_xlat4.xyz = u_xlat3.zxw * u_xlat7.yxz;
					    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat4.ywxw;
					    u_xlat8.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat4.zw;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat8.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat8.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat3.zw,u_xlat8.z);
					    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat5.y = 7.0;
					    u_xlat2.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat17.yyy * u_xlat5.xyz;
					    u_xlat5.xy = u_xlat5.xz * vec2(7.0, 7.0);
					    u_xlat17.x = u_xlat17.x * u_xlat2.y;
					    u_xlat16 = u_xlat2.x * u_xlat16 + u_xlat17.x;
					    u_xlat8.x = u_xlat2.z * u_xlat8.x + u_xlat16;
					    u_xlat6.w = u_xlat4.y;
					    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat6.wywz;
					    u_xlat4.yw = u_xlat6.yz;
					    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat8.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat8.z);
					    u_xlat17.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
					    u_xlat8.x = u_xlat5.x * u_xlat16 + u_xlat8.x;
					    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat4.xyzy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat4.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat8.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat8.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
					    u_xlat8.x = u_xlat16 * 49.0 + u_xlat8.x;
					    u_xlat8.x = u_xlat5.y * u_xlat1.x + u_xlat8.x;
					    u_xlat8.x = u_xlat3.x * u_xlat17.x + u_xlat8.x;
					    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat8.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat8.z);
					    u_xlat24 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
					    u_xlat8.x = u_xlat3.y * u_xlat16 + u_xlat8.x;
					    u_xlat8.x = u_xlat3.z * u_xlat24 + u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * 0.0069444445;
					    u_xlat16 = (-_LightShadowData.x) + 1.0;
					    u_xlat8.x = u_xlat8.x * u_xlat16 + _LightShadowData.x;
					    SV_Target0 = u_xlat0.xxxx + u_xlat8.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _LightShadowData;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowMapTexture_TexelSize;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//   float4 unity_OrthoParams;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   unity_CameraToWorld         c0       4
					//   unity_WorldToShadow         c4       3
					//   _ZBufferParams              c7       1
					//   unity_OrthoParams           c8       1
					//   _LightShadowData            c9       1
					//   _ShadowMapTexture_TexelSize c10      1
					//   _CameraDepthTexture         s0       1
					//   _ShadowMapTexture           s1       1
					//
					
					    ps_3_0
					    def c11, 1, 0.5, -0.5, 3
					    def c12, 3, 4, 2, -2
					    def c13, 1, 0, 0.142857149, -1
					    def c14, 4, 7, 1, 49
					    def c15, 0.0069444445, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c10
					    mad r1.xyz, r0.yxyw, c13.xyxw, c13.yzyw
					    texld r2, v0, s0
					    mad r0.y, c7.x, r2.x, c7.y
					    rcp r0.y, r0.y
					    lrp r1.w, c8.w, r2.x, r0.y
					    mov r3.xyz, v2
					    add r2.yzw, -r3.xxyz, v3.xxyz
					    mad r2.xyz, r2.x, r2.yzww, v2
					    mad r2.xyz, v1, -r1.w, r2
					    mul r3.xyz, r1.w, v1
					    mad r2.xyz, c8.w, r2, r3
					    mov r2.w, c11.x
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    mad_sat r0.y, r2.z, c9.z, c9.w
					    dp4 r2.x, c4, r3
					    dp4 r2.y, c5, r3
					    dp4 r3.z, c6, r3
					    mad r0.zw, r2.xyxy, r0, c11.y
					    frc r2.xy, r0.zwzw
					    add r0.zw, r0, -r2.xyxy
					    add r0.zw, r0, c11.z
					    mad r2.zw, r2.xyxy, c11.w, c11.x
					    rcp r1.w, r2.w
					    mad r4.z, r2.y, r1.w, c12.z
					    add r5.xy, r2, c11.w
					    mul r5.yz, r5.xxyw, c10.xxyw
					    mov r4.y, r5.z
					    mad r6.xy, r2, -c12.z, c12.x
					    mad r6.zw, r2.xyxy, -c12.x, c12.y
					    rcp r1.w, r6.w
					    mad r4.x, r6.y, r1.w, c12.w
					    mul r1.xyz, r1, r4
					    mov r4.w, r1.x
					    rcp r1.x, r2.z
					    mad r5.w, r2.x, r1.x, c12.z
					    mul r1.x, r2.x, c11.w
					    mov r7.xyw, c13
					    mad r2.xyz, r1.x, r7.wyxw, c14
					    rcp r1.x, r6.z
					    mul_pp r6.yzw, r6.w, r2.xxyz
					    mad r5.x, r6.x, r1.x, c12.w
					    mad r7.xyz, r0.x, c13.xyxw, c13.yzyw
					    mul r4.xyz, r5.yxww, r7.yxzw
					    mad r3.xy, r0.zwzw, c10, r4.ywzw
					    mov r3.w, c11.x
					    texldp r5, r3, s1
					    mad r3.xy, r0.zwzw, c10, r4.xwzw
					    mad r7.xy, r0.zwzw, c10, r4.zwzw
					    texldp r8, r3, s1
					    mov r7.zw, r3
					    mul r0.x, r6.z, r8.x
					    mad_pp r0.x, r6.y, r5.x, r0.x
					    texldp r3, r7, s1
					    mad_pp r0.x, r6.w, r3.x, r0.x
					    mov r1.w, r4.y
					    mad r7.xy, r0.zwzw, c10, r1.wyzw
					    mad r3.xy, r0.zwzw, c10, r1.wzzw
					    mov r4.yw, r1.xyzz
					    texldp r1, r7, s1
					    mul_pp r1.yz, r2.xxzw, c14.y
					    mul_pp r2.xyz, r2.w, r2
					    mad_pp r0.x, r1.y, r1.x, r0.x
					    mad r7.xy, r0.zwzw, c10, r4
					    texldp r5, r7, s1
					    mad_pp r0.x, r5.x, c14.w, r0.x
					    mad r7.xy, r0.zwzw, c10, r4.zyzw
					    texldp r5, r7, s1
					    mov r3.zw, r7
					    mad_pp r0.x, r1.z, r5.x, r0.x
					    texldp r1, r3, s1
					    mad_pp r0.x, r2.x, r1.x, r0.x
					    mad r3.xy, r0.zwzw, c10, r4.xwzw
					    mad r1.xy, r0.zwzw, c10, r4.zwzw
					    texldp r4, r3, s1
					    mov r1.zw, r3
					    texldp r1, r1, s1
					    mad_pp r0.x, r2.y, r4.x, r0.x
					    mad_pp r0.x, r2.z, r1.x, r0.x
					    mul_pp r0.x, r0.x, c15.x
					    mov r1.x, c11.x
					    lrp_pp r2.x, r0.x, r1.x, c9.x
					    add_pp oC0, r0.y, r2.x
					
					// approximately 86 instruction slots used (10 texture, 76 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SINGLE_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ShadowMapTexture_TexelSize;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unused_3_4;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat9;
					vec2 u_xlat10;
					float u_xlat16;
					vec2 u_xlat18;
					float u_xlat24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xz = _ShadowMapTexture_TexelSize.yy;
					    u_xlat0.y = 0.142857149;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat24 = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat9.x = (-u_xlat24) + u_xlat1.x;
					    u_xlat24 = unity_OrthoParams.w * u_xlat9.x + u_xlat24;
					    u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat9.xyz + vs_TEXCOORD2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = unity_OrthoParams.www * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_CameraToWorld[1];
					    u_xlat2 = unity_CameraToWorld[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_CameraToWorld[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat24 = u_xlat1.z * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat1 = u_xlat2 + unity_CameraToWorld[3];
					    u_xlat2.xyz = u_xlat1.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = unity_WorldToShadow[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = unity_WorldToShadow[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = unity_WorldToShadow[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat1.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat2.xy = fract(u_xlat1.xy);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat18.xy = (-u_xlat2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
					    u_xlat3.xy = (-u_xlat2.xy) * vec2(3.0, 3.0) + vec2(4.0, 4.0);
					    u_xlat18.xy = u_xlat18.xy / u_xlat3.xy;
					    u_xlat4.xy = u_xlat18.xy + vec2(-2.0, -2.0);
					    u_xlat5.z = u_xlat4.y;
					    u_xlat18.xy = u_xlat2.xy * vec2(3.0, 3.0) + vec2(1.0, 1.0);
					    u_xlat3.xz = u_xlat2.xy / u_xlat18.xy;
					    u_xlat5.xw = u_xlat3.xz + vec2(2.0, 2.0);
					    u_xlat4.w = u_xlat5.x;
					    u_xlat10.xy = u_xlat2.xy + vec2(3.0, 3.0);
					    u_xlat25 = u_xlat2.x * 3.0;
					    u_xlat6.xz = vec2(u_xlat25) * vec2(-1.0, 1.0) + vec2(4.0, 1.0);
					    u_xlat5.xy = u_xlat10.xy * _ShadowMapTexture_TexelSize.xy;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat5.zyw;
					    u_xlat4.z = u_xlat5.x;
					    u_xlat5.w = u_xlat7.x;
					    u_xlat0.xz = _ShadowMapTexture_TexelSize.xx;
					    u_xlat0.y = 0.142857149;
					    u_xlat5.xyz = u_xlat0.yxz * u_xlat4.zxw;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
					    u_xlat0.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat1.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat1.z);
					    u_xlat8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat4.zw,u_xlat1.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.y = 7.0;
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat18.yyy * u_xlat6.xyz;
					    u_xlat4.xy = u_xlat6.xz * vec2(7.0, 7.0);
					    u_xlat16 = u_xlat16 * u_xlat2.y;
					    u_xlat8 = u_xlat2.x * u_xlat8 + u_xlat16;
					    u_xlat0.x = u_xlat2.z * u_xlat0.x + u_xlat8;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.wywz;
					    u_xlat5.yw = u_xlat7.yz;
					    vec3 txVec3 = vec3(u_xlat2.xy,u_xlat1.z);
					    u_xlat8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat2.zw,u_xlat1.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
					    u_xlat0.x = u_xlat4.x * u_xlat8 + u_xlat0.x;
					    u_xlat2 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
					    u_xlat5 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
					    vec3 txVec5 = vec3(u_xlat2.xy,u_xlat1.z);
					    u_xlat8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat2.zw,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
					    u_xlat0.x = u_xlat8 * 49.0 + u_xlat0.x;
					    u_xlat0.x = u_xlat4.y * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = u_xlat3.x * u_xlat16 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat5.xy,u_xlat1.z);
					    u_xlat8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat5.zw,u_xlat1.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat8 + u_xlat0.x;
					    u_xlat0.x = u_xlat3.z * u_xlat16 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.0069444445;
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + _LightShadowData.x;
					    SV_Target0 = vec4(u_xlat24) + u_xlat0.xxxx;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9431.0
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _LightShadowData;
					//   sampler2D _ShadowMapTexture;
					//   float4 _ShadowMapTexture_TexelSize;
					//   float4 _ZBufferParams;
					//   row_major float4x4 unity_CameraToWorld;
					//   float4 unity_OrthoParams;
					//   float4 unity_ShadowFadeCenterAndType;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_CameraToWorld           c0       4
					//   unity_WorldToShadow           c4       3
					//   _ZBufferParams                c7       1
					//   unity_OrthoParams             c8       1
					//   _LightShadowData              c9       1
					//   unity_ShadowFadeCenterAndType c10      1
					//   _ShadowMapTexture_TexelSize   c11      1
					//   _CameraDepthTexture           s0       1
					//   _ShadowMapTexture             s1       1
					//
					
					    ps_3_0
					    def c12, 1, 0.5, -0.5, 3
					    def c13, 3, 4, 2, -2
					    def c14, 1, 0, 0.142857149, -1
					    def c15, 4, 7, 1, 49
					    def c16, 0.0069444445, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c11
					    mad r1.xyz, r0.yxyw, c14.xyxw, c14.yzyw
					    texld r2, v0, s0
					    mad r0.y, c7.x, r2.x, c7.y
					    rcp r0.y, r0.y
					    lrp r1.w, c8.w, r2.x, r0.y
					    mov r3.xyz, v2
					    add r2.yzw, -r3.xxyz, v3.xxyz
					    mad r2.xyz, r2.x, r2.yzww, v2
					    mad r2.xyz, v1, -r1.w, r2
					    mul r3.xyz, r1.w, v1
					    mad r2.xyz, c8.w, r2, r3
					    mov r2.w, c12.x
					    dp4 r3.w, c3, r2
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r2.x, c4, r3
					    dp4 r2.y, c5, r3
					    dp4 r4.z, c6, r3
					    add r3.xyz, r3, -c10
					    dp3 r0.y, r3, r3
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mad_sat_pp r0.y, r0.y, c9.z, c9.w
					    mad r0.zw, r2.xyxy, r0, c12.y
					    frc r2.xy, r0.zwzw
					    add r0.zw, r0, -r2.xyxy
					    add r0.zw, r0, c12.z
					    mad r2.zw, r2.xyxy, c12.w, c12.x
					    rcp r1.w, r2.w
					    mad r3.z, r2.y, r1.w, c13.z
					    add r5.xy, r2, c12.w
					    mul r5.yz, r5.xxyw, c11.xxyw
					    mov r3.y, r5.z
					    mad r6.xy, r2, -c13.z, c13.x
					    mad r6.zw, r2.xyxy, -c13.x, c13.y
					    rcp r1.w, r6.w
					    mad r3.x, r6.y, r1.w, c13.w
					    mul r1.xyz, r1, r3
					    mov r3.w, r1.x
					    rcp r1.x, r2.z
					    mad r5.w, r2.x, r1.x, c13.z
					    mul r1.x, r2.x, c12.w
					    mov r7.xyw, c14
					    mad r2.xyz, r1.x, r7.wyxw, c15
					    rcp r1.x, r6.z
					    mul_pp r6.yzw, r6.w, r2.xxyz
					    mad r5.x, r6.x, r1.x, c13.w
					    mad r7.xyz, r0.x, c14.xyxw, c14.yzyw
					    mul r3.xyz, r5.yxww, r7.yxzw
					    mad r4.xy, r0.zwzw, c11, r3.ywzw
					    mov r4.w, c12.x
					    texldp r5, r4, s1
					    mad r4.xy, r0.zwzw, c11, r3.xwzw
					    mad r7.xy, r0.zwzw, c11, r3.zwzw
					    texldp r8, r4, s1
					    mov r7.zw, r4
					    mul r0.x, r6.z, r8.x
					    mad_pp r0.x, r6.y, r5.x, r0.x
					    texldp r4, r7, s1
					    mad_pp r0.x, r6.w, r4.x, r0.x
					    mov r1.w, r3.y
					    mad r7.xy, r0.zwzw, c11, r1.wyzw
					    mad r4.xy, r0.zwzw, c11, r1.wzzw
					    mov r3.yw, r1.xyzz
					    texldp r1, r7, s1
					    mul_pp r1.yz, r2.xxzw, c15.y
					    mul_pp r2.xyz, r2.w, r2
					    mad_pp r0.x, r1.y, r1.x, r0.x
					    mad r7.xy, r0.zwzw, c11, r3
					    texldp r5, r7, s1
					    mad_pp r0.x, r5.x, c15.w, r0.x
					    mad r7.xy, r0.zwzw, c11, r3.zyzw
					    texldp r5, r7, s1
					    mov r4.zw, r7
					    mad_pp r0.x, r1.z, r5.x, r0.x
					    texldp r1, r4, s1
					    mad_pp r0.x, r2.x, r1.x, r0.x
					    mad r4.xy, r0.zwzw, c11, r3.xwzw
					    mad r1.xy, r0.zwzw, c11, r3.zwzw
					    texldp r3, r4, s1
					    mov r1.zw, r4
					    texldp r1, r1, s1
					    mad_pp r0.x, r2.y, r3.x, r0.x
					    mad_pp r0.x, r2.z, r1.x, r0.x
					    mul_pp r0.x, r0.x, c16.x
					    mov r1.x, c12.x
					    lrp_pp r2.x, r0.x, r1.x, c9.x
					    add_pp oC0, r0.y, r2.x
					
					// approximately 90 instruction slots used (10 texture, 80 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "SHADOWS_SPLIT_SPHERES" "SHADOWS_SINGLE_CASCADE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _ShadowMapTexture_TexelSize;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerCameraRare {
						vec4 unused_2_0[18];
						mat4x4 unity_CameraToWorld;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[8];
						mat4x4 unity_WorldToShadow;
						vec4 unused_3_2[12];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					vec3 u_xlat9;
					float u_xlat16;
					vec2 u_xlat17;
					float u_xlat24;
					void main()
					{
					    u_xlat0.xz = _ShadowMapTexture_TexelSize.yy;
					    u_xlat0.y = 0.142857149;
					    u_xlat1 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlat24 = _ZBufferParams.x * u_xlat1.x + _ZBufferParams.y;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat9.x = (-u_xlat24) + u_xlat1.x;
					    u_xlat24 = unity_OrthoParams.w * u_xlat9.x + u_xlat24;
					    u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat9.xyz + vs_TEXCOORD2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + u_xlat1.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;
					    u_xlat1.xyz = unity_OrthoParams.www * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_CameraToWorld[1];
					    u_xlat2 = unity_CameraToWorld[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_CameraToWorld[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = u_xlat1 + unity_CameraToWorld[3];
					    u_xlat2.xyz = u_xlat1.yyy * unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = unity_WorldToShadow[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToShadow[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToShadow[3].xyz * u_xlat1.www + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat1.xy = u_xlat2.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat17.xy = fract(u_xlat1.xy);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat1.xy = u_xlat1.xy + vec2(-0.5, -0.5);
					    u_xlat2.xy = (-u_xlat17.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
					    u_xlat3.xy = (-u_xlat17.xy) * vec2(3.0, 3.0) + vec2(4.0, 4.0);
					    u_xlat2.xy = u_xlat2.xy / u_xlat3.xy;
					    u_xlat4.xy = u_xlat2.xy + vec2(-2.0, -2.0);
					    u_xlat5.z = u_xlat4.y;
					    u_xlat2.xy = u_xlat17.xy * vec2(3.0, 3.0) + vec2(1.0, 1.0);
					    u_xlat2.xw = u_xlat17.xy / u_xlat2.xy;
					    u_xlat5.xw = u_xlat2.xw + vec2(2.0, 2.0);
					    u_xlat4.w = u_xlat5.x;
					    u_xlat2.xw = u_xlat17.xy + vec2(3.0, 3.0);
					    u_xlat17.x = u_xlat17.x * 3.0;
					    u_xlat6.xz = u_xlat17.xx * vec2(-1.0, 1.0) + vec2(4.0, 1.0);
					    u_xlat5.xy = u_xlat2.xw * _ShadowMapTexture_TexelSize.xy;
					    u_xlat7.xyz = u_xlat0.xyz * u_xlat5.zyw;
					    u_xlat4.z = u_xlat5.x;
					    u_xlat5.w = u_xlat7.x;
					    u_xlat0.xz = _ShadowMapTexture_TexelSize.xx;
					    u_xlat0.y = 0.142857149;
					    u_xlat5.xyz = u_xlat0.yxz * u_xlat4.zxw;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.ywxw;
					    u_xlat0.xy = u_xlat1.xy * _ShadowMapTexture_TexelSize.xy + u_xlat5.zw;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat2.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.xy,u_xlat2.z);
					    u_xlat8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    vec3 txVec2 = vec3(u_xlat4.zw,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.y = 7.0;
					    u_xlat3.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat6.xyz;
					    u_xlat17.xy = u_xlat6.xz * vec2(7.0, 7.0);
					    u_xlat16 = u_xlat16 * u_xlat3.y;
					    u_xlat8 = u_xlat3.x * u_xlat8 + u_xlat16;
					    u_xlat0.x = u_xlat3.z * u_xlat0.x + u_xlat8;
					    u_xlat7.w = u_xlat5.y;
					    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat7.wywz;
					    u_xlat5.yw = u_xlat7.yz;
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat2.z);
					    u_xlat8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    vec3 txVec4 = vec3(u_xlat3.zw,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec4, 0.0);
					    u_xlat0.x = u_xlat17.x * u_xlat8 + u_xlat0.x;
					    u_xlat3 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xyzy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat5.xwzw;
					    vec3 txVec5 = vec3(u_xlat3.xy,u_xlat2.z);
					    u_xlat8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec5, 0.0);
					    vec3 txVec6 = vec3(u_xlat3.zw,u_xlat2.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec6, 0.0);
					    u_xlat0.x = u_xlat8 * 49.0 + u_xlat0.x;
					    u_xlat0.x = u_xlat17.y * u_xlat1.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * u_xlat16 + u_xlat0.x;
					    vec3 txVec7 = vec3(u_xlat4.xy,u_xlat2.z);
					    u_xlat8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec7, 0.0);
					    vec3 txVec8 = vec3(u_xlat4.zw,u_xlat2.z);
					    u_xlat16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec8, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat8 + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat16 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.0069444445;
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + _LightShadowData.x;
					    SV_Target0 = vec4(u_xlat24) + u_xlat0.xxxx;
					    return;
					}"
}
}
 }
}
Fallback Off
}